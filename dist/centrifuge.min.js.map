{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///centrifuge.min.js","webpack:///webpack/bootstrap 61e580bbbe0b06f92fcf","webpack:///./src/centrifuge.js","webpack:///./src/subscription.js","webpack:///./src/json.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/index.js","webpack:///./node_modules/events/events.js","webpack:///./src/utils.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","10","global","_interopRequireDefault","obj","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","Centrifuge","undefined","_typeof","Symbol","iterator","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_events","_events2","_subscription","_subscription2","_json","_utils","_EventEmitter","url","options","_this","getPrototypeOf","_url","_sockjs","_isSockjs","_binary","_methodType","_pushType","_encoder","_decoder","_status","_reconnect","_reconnecting","_transport","_transportName","_transportClosed","_messageId","_clientID","_refreshRequired","_subs","_lastPubUID","_messages","_isBatching","_isSubscribeBatching","_privateChannels","_numRefreshFailed","_refreshTimeout","_pingInterval","_pongTimeout","_subRefreshTimeouts","_retries","_callbacks","_latency","_latencyStart","_connectData","_token","_lastMessageTime","_serverTime","_connectedAt","_config","debug","sockjs","promise","minRetry","maxRetry","timeout","ping","pingInterval","pongWaitTimeout","privateChannelPrefix","onTransportClose","sockjsServer","sockjsTransports","refreshEndpoint","refreshHeaders","refreshParams","refreshData","refreshAttempts","refreshInterval","onRefreshFailed","onRefresh","subscribeEndpoint","subscribeHeaders","subscribeParams","subRefreshInterval","onPrivateSubscribe","_configure","token","data","params","headers","callback","_this2","query","_debug","JSON","stringify","xhr","XMLHttpRequest","ActiveXObject","encodeURIComponent","open","withCredentials","setRequestHeader","headerName","onreadystatechange","readyState","status","parsed","parse","responseText","e","error","_log","setTimeout","send","log","arguments","WebSocket","format","_formatOverride","Error","JsonMethodType","JsonPushType","JsonEncoder","JsonDecoder","configuration","assign","startsWith","indexOf","_setFormat","SockJS","newStatus","interval","backoff","reconnect","id","callbacks","clearTimeout","errback","_createErrorObject","channel","sub","_isSuccess","_triggerUnsubscribe","_since","_getSince","_setSubscribing","_setUnsubscribed","_clearSubRefreshTimeout","commands","encodeCommands","_this3","sockjsOptions","transports","server","_websocketSupported","binaryType","onopen","transport","onheartbeat","_restartPing","msg","Date","_call","then","result","_connectResponse","decodeCommandResult","CONNECT","err","code","_disconnect","onerror","onclose","closeEvent","reason","needReconnect","advice","event","_getRetryInterval","_refresh","_connect","onmessage","replies","decodeReplies","_dispatchReply","_this4","method","RPC","SEND","_callAsync","_addMessage","_this5","Promise","resolve","reject","_registerCall","isConnected","_setStatus","_setupTransport","shouldReconnect","_isDisconnected","_clearConnectedState","emit","close","_this6","_refreshFailed","cb","resp","jitter","Math","round","random","max","REFRESH","_refreshResponse","_refreshError","context","_ajax","_this7","_this8","expires","client","ttl","_this9","channelsData","channels","channelData","SUB_REFRESH","_getSub","_subRefreshResponse","_subRefreshError","_this10","subRefreshTimeout","_subRefresh","_this11","isResubscribe","_this12","_setNew","SUBSCRIBE","startSubscribeBatching","_subscribe","stopSubscribeBatching","_needRecover","recover","last","_getLastID","since","_subscribeResponse","_subscribeError","UNSUBSCRIBE","now","delta","floor","_this13","wasReconnecting","_resetRetry","getTime","time","startBatching","_shouldResubscribe","stopBatching","ctx","latency","clearInterval","_this14","setInterval","_stopPing","_startPing","_isSubscribing","message","_setSubscribeError","_this15","expired","recovered","_setSubscribeSuccess","pubs","publications","reverse","_handlePublication","reply","errorExists","join","leave","unsub","unsubscribe","resubscribe","subscribe","pub","uid","push","decodePush","type","PUBLICATION","decodePushData","MESSAGE","_handleMessage","JOIN","_handleJoin","LEAVE","_handleLeave","UNSUB","_handleUnsub","_handleReply","_handlePush","messages","slice","_transportSend","PING","lastUID","_this16","isFunction","async","_nextMessageId","_isConnected","_ping","_flush","_this17","authChannels","batch","_ret","events","currentSub","_setEvents","_isUnsubscribed","11","_STATE_NEW","Subscription","centrifuge","_centrifuge","_error","_isResubscribe","_ready","_subscriptionPromise","_noResubscribe","_initializePromise","_resolve","_reject","on","toString","knownEvents","ev","successContext","_getSubscribeSuccessContext","errContext","_getSubscribeErrorContext","noResubscribe","needTrigger","subscribeErrorContext","_unsubscribe","_methodCall","PUBLISH","PRESENCE","PRESENCE_STATS","HISTORY","12","encodedCommands","encodedReplies","split","methodType","pushType","3","g","Function","eval","window","31","6","EventEmitter","_maxListeners","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","er","handler","len","args","listeners","Array","apply","addListener","listener","newListener","warned","console","trace","once","removeListener","fired","list","position","splice","removeAllListeners","listenerCount","evlistener","emitter","7","prefix","lastIndexOf","level","logger","step","min","pow"],"mappings":"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","file":"centrifuge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 31);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Centrifuge = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _subscription = __webpack_require__(11);\n\nvar _subscription2 = _interopRequireDefault(_subscription);\n\nvar _json = __webpack_require__(12);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _errorTimeout = 'timeout';\n\nvar Centrifuge = exports.Centrifuge = function (_EventEmitter) {\n  _inherits(Centrifuge, _EventEmitter);\n\n  function Centrifuge(url, options) {\n    _classCallCheck(this, Centrifuge);\n\n    var _this = _possibleConstructorReturn(this, (Centrifuge.__proto__ || Object.getPrototypeOf(Centrifuge)).call(this));\n\n    _this._url = url;\n    _this._sockjs = null;\n    _this._isSockjs = false;\n    _this._binary = false;\n    _this._methodType = null;\n    _this._pushType = null;\n    _this._encoder = null;\n    _this._decoder = null;\n    _this._status = 'disconnected';\n    _this._reconnect = true;\n    _this._reconnecting = false;\n    _this._transport = null;\n    _this._transportName = null;\n    _this._transportClosed = true;\n    _this._messageId = 0;\n    _this._clientID = null;\n    _this._refreshRequired = false;\n    _this._subs = {};\n    _this._lastPubUID = {};\n    _this._messages = [];\n    _this._isBatching = false;\n    _this._isSubscribeBatching = false;\n    _this._privateChannels = {};\n    _this._numRefreshFailed = 0;\n    _this._refreshTimeout = null;\n    _this._pingInterval = null;\n    _this._pongTimeout = null;\n    _this._subRefreshTimeouts = {};\n    _this._retries = 0;\n    _this._callbacks = {};\n    _this._latency = null;\n    _this._latencyStart = null;\n    _this._connectData = null;\n    _this._token = null;\n    _this._lastMessageTime = null;\n    _this._serverTime = null;\n    _this._connectedAt = null;\n    _this._config = {\n      debug: false,\n      sockjs: null,\n      promise: null,\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 30000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: ['websocket', 'xdr-streaming', 'xhr-streaming', 'eventsource', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    _this._configure(options);\n    return _this;\n  }\n\n  _createClass(Centrifuge, [{\n    key: 'setToken',\n    value: function setToken(token) {\n      this._token = token;\n    }\n  }, {\n    key: 'setConnectData',\n    value: function setConnectData(data) {\n      this._connectData = data;\n    }\n  }, {\n    key: '_ajax',\n    value: function _ajax(url, params, headers, data, callback) {\n      var _this2 = this;\n\n      var query = '';\n      this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n      var xhr = global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP');\n\n      for (var i in params) {\n        if (params.hasOwnProperty(i)) {\n          if (query.length > 0) {\n            query += '&';\n          }\n          query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n        }\n      }\n      if (query.length > 0) {\n        query = '?' + query;\n      }\n      xhr.open('POST', url + query, true);\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = true;\n      }\n\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      for (var headerName in headers) {\n        if (headers.hasOwnProperty(headerName)) {\n          xhr.setRequestHeader(headerName, headers[headerName]);\n        }\n      }\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var _data = void 0,\n                parsed = false;\n            try {\n              _data = JSON.parse(xhr.responseText);\n              parsed = true;\n            } catch (e) {\n              callback({\n                error: 'Invalid JSON. Data was: ' + xhr.responseText,\n                status: 200,\n                data: null\n              });\n            }\n            if (parsed) {\n              // prevents double execution.\n              callback({\n                data: _data,\n                status: 200\n              });\n            }\n          } else {\n            _this2._log('wrong status code in AJAX response', xhr.status);\n            callback({\n              status: xhr.status,\n              data: null\n            });\n          }\n        }\n      };\n      setTimeout(function () {\n        return xhr.send(JSON.stringify(data));\n      }, 20);\n      return xhr;\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      (0, _utils.log)('info', arguments);\n    }\n  }, {\n    key: '_debug',\n    value: function _debug() {\n      if (this._config.debug === true) {\n        (0, _utils.log)('debug', arguments);\n      }\n    }\n  }, {\n    key: '_websocketSupported',\n    value: function _websocketSupported() {\n      return !(typeof WebSocket !== 'function' && (typeof WebSocket === 'undefined' ? 'undefined' : _typeof(WebSocket)) !== 'object');\n    }\n  }, {\n    key: '_setFormat',\n    value: function _setFormat(format) {\n      if (this._formatOverride(format)) {\n        return;\n      }\n      if (format === 'protobuf') {\n        throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n      }\n      this._binary = false;\n      this._methodType = _json.JsonMethodType;\n      this._pushType = _json.JsonPushType;\n      this._encoder = new _json.JsonEncoder();\n      this._decoder = new _json.JsonDecoder();\n    }\n  }, {\n    key: '_formatOverride',\n    value: function _formatOverride(format) {\n      return false;\n    }\n  }, {\n    key: '_configure',\n    value: function _configure(configuration) {\n      if (!('Promise' in global)) {\n        throw new Error('Promise polyfill required');\n      }\n\n      Object.assign(this._config, configuration || {});\n      this._debug('centrifuge config', this._config);\n\n      if (!this._url) {\n        throw new Error('url required');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n        this._setFormat('protobuf');\n      } else {\n        this._setFormat('json');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'http')) {\n        this._debug('client will try to connect to SockJS endpoint');\n        if (this._config.sockjs !== null) {\n          this._debug('SockJS explicitly provided in options');\n          this._sockjs = this._config.sockjs;\n        } else {\n          if (typeof global.SockJS === 'undefined') {\n            throw new Error('SockJS not found, use ws:// in url or include SockJS');\n          }\n          this._debug('use globally defined SockJS');\n          this._sockjs = global.SockJS;\n        }\n      } else {\n        this._debug('client will connect to websocket endpoint');\n      }\n    }\n  }, {\n    key: '_setStatus',\n    value: function _setStatus(newStatus) {\n      if (this._status !== newStatus) {\n        this._debug('Status', this._status, '->', newStatus);\n        this._status = newStatus;\n      }\n    }\n  }, {\n    key: '_isDisconnected',\n    value: function _isDisconnected() {\n      return this._status === 'disconnected';\n    }\n  }, {\n    key: '_isConnecting',\n    value: function _isConnecting() {\n      return this._status === 'connecting';\n    }\n  }, {\n    key: '_isConnected',\n    value: function _isConnected() {\n      return this._status === 'connected';\n    }\n  }, {\n    key: '_nextMessageId',\n    value: function _nextMessageId() {\n      return ++this._messageId;\n    }\n  }, {\n    key: '_resetRetry',\n    value: function _resetRetry() {\n      this._debug('reset retries count to 0');\n      this._retries = 0;\n    }\n  }, {\n    key: '_getRetryInterval',\n    value: function _getRetryInterval() {\n      var interval = (0, _utils.backoff)(this._retries, this._config.minRetry, this._config.maxRetry);\n\n      this._retries += 1;\n      return interval;\n    }\n  }, {\n    key: '_clearConnectedState',\n    value: function _clearConnectedState(reconnect) {\n      this._clientID = null;\n\n      // fire errbacks of registered outgoing calls.\n      for (var id in this._callbacks) {\n        if (this._callbacks.hasOwnProperty(id)) {\n          var callbacks = this._callbacks[id];\n          clearTimeout(callbacks.timeout);\n          var errback = callbacks.errback;\n          if (!errback) {\n            continue;\n          }\n          errback(this._createErrorObject('disconnected'));\n        }\n      }\n      this._callbacks = {};\n\n      // fire unsubscribe events\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n\n          if (reconnect) {\n            if (sub._isSuccess()) {\n              sub._triggerUnsubscribe();\n              sub._since = this._getSince();\n            }\n            sub._setSubscribing();\n          } else {\n            sub._setUnsubscribed();\n          }\n        }\n      }\n\n      // clear refresh timer\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n\n      // clear sub refresh timers\n      for (var _channel in this._subRefreshTimeouts) {\n        if (this._subRefreshTimeouts.hasOwnProperty(_channel) && this._subRefreshTimeouts[_channel]) {\n          this._clearSubRefreshTimeout(_channel);\n        }\n      }\n      this._subRefreshTimeouts = {};\n\n      if (!this._reconnect) {\n        // completely clear subscriptions\n        this._subs = {};\n      }\n    }\n  }, {\n    key: '_transportSend',\n    value: function _transportSend(commands) {\n      if (!commands.length) {\n        return;\n      }\n      if (!this._transport) {\n        throw new Error('transport not connected');\n      }\n      this._transport.send(this._encoder.encodeCommands(commands));\n    }\n  }, {\n    key: '_setupTransport',\n    value: function _setupTransport() {\n      var _this3 = this;\n\n      this._isSockjs = false;\n\n      // detect transport to use - SockJS or Websocket\n      if (this._sockjs !== null) {\n        var sockjsOptions = {\n          transports: this._config.sockjsTransports\n        };\n\n        if (this._config.sockjsServer !== null) {\n          sockjsOptions.server = this._config.sockjsServer;\n        }\n        this._isSockjs = true;\n        this._transport = new this._sockjs(this._url, null, sockjsOptions);\n      } else {\n        if (!this._websocketSupported()) {\n          this._debug('No Websocket support and no SockJS configured, can not connect');\n          return;\n        }\n        this._transport = new WebSocket(this._url);\n        if (this._binary === true) {\n          this._transport.binaryType = 'arraybuffer';\n        }\n      }\n\n      this._transport.onopen = function () {\n        _this3._transportClosed = false;\n\n        if (_this3._isSockjs) {\n          _this3._transportName = 'sockjs-' + _this3._transport.transport;\n          _this3._transport.onheartbeat = function () {\n            return _this3._restartPing();\n          };\n        } else {\n          _this3._transportName = 'websocket';\n        }\n\n        // Can omit method here due to zero value.\n        var msg = {\n          // method: this._methodType.CONNECT\n        };\n\n        if (_this3._token || _this3._connectData) {\n          msg.params = {};\n        }\n\n        if (_this3._token) {\n          msg.params.token = _this3._token;\n        }\n\n        if (_this3._connectData) {\n          msg.params.data = _this3._connectData;\n        }\n\n        _this3._latencyStart = new Date();\n        _this3._call(msg).then(function (result) {\n          _this3._connectResponse(_this3._decoder.decodeCommandResult(_this3._methodType.CONNECT, result));\n        }, function (err) {\n          if (err.code === 109) {\n            // token expired.\n            _this3._refreshRequired = true;\n          }\n          _this3._disconnect('connect error', true);\n        });\n      };\n\n      this._transport.onerror = function (error) {\n        _this3._debug('transport level error', error);\n      };\n\n      this._transport.onclose = function (closeEvent) {\n        _this3._transportClosed = true;\n        var reason = 'connection closed';\n        var needReconnect = true;\n\n        if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n          try {\n            var advice = JSON.parse(closeEvent.reason);\n            _this3._debug('reason is an advice object', advice);\n            reason = advice.reason;\n            needReconnect = advice.reconnect;\n            _this3._lastMessageTime = new Date();\n          } catch (e) {\n            reason = closeEvent.reason;\n            _this3._debug('reason is a plain string', reason);\n          }\n        }\n\n        // onTransportClose callback should be executed every time transport was closed.\n        // This can be helpful to catch failed connection events (because our disconnect\n        // event only called once and every future attempts to connect do not fire disconnect\n        // event again).\n        if (_this3._config.onTransportClose !== null) {\n          _this3._config.onTransportClose({\n            event: closeEvent,\n            reason: reason,\n            reconnect: needReconnect\n          });\n        }\n\n        _this3._disconnect(reason, needReconnect);\n\n        if (_this3._reconnect === true) {\n          _this3._reconnecting = true;\n          var interval = _this3._getRetryInterval();\n\n          _this3._debug('reconnect after ' + interval + ' milliseconds');\n          setTimeout(function () {\n            if (_this3._reconnect === true) {\n              if (_this3._refreshRequired) {\n                _this3._refresh();\n              } else {\n                _this3._connect();\n              }\n            }\n          }, interval);\n        }\n      };\n\n      this._transport.onmessage = function (event) {\n        _this3._lastMessageTime = new Date();\n        var replies = _this3._decoder.decodeReplies(event.data);\n        for (var i in replies) {\n          if (replies.hasOwnProperty(i)) {\n            _this3._dispatchReply(replies[i]);\n          }\n        }\n        _this3._restartPing();\n      };\n    }\n  }, {\n    key: 'rpc',\n    value: function rpc(data) {\n      var _this4 = this;\n\n      var msg = {\n        method: this._methodType.RPC,\n        params: {\n          data: data\n        }\n      };\n      return this._call(msg).then(function (result) {\n        return _this4._decoder.decodeCommandResult(_this4._methodType.RPC, result);\n      });\n    }\n  }, {\n    key: 'send',\n    value: function send(data) {\n      var msg = {\n        method: this._methodType.SEND,\n        params: {\n          data: data\n        }\n      };\n\n      return this._callAsync(msg);\n    }\n  }, {\n    key: '_callAsync',\n    value: function _callAsync(msg) {\n      this._addMessage(msg, true);\n    }\n  }, {\n    key: '_call',\n    value: function _call(msg) {\n      var _this5 = this;\n\n      return new global.Promise(function (resolve, reject) {\n        var id = _this5._addMessage(msg);\n        _this5._registerCall(id, resolve, reject);\n      });\n    }\n  }, {\n    key: '_connect',\n    value: function _connect() {\n      if (this.isConnected()) {\n        this._debug('connect called when already connected');\n        return;\n      }\n      if (this._status === 'connecting') {\n        return;\n      }\n\n      this._debug('start connecting');\n      this._setStatus('connecting');\n      this._clientID = null;\n      this._reconnect = true;\n      this._setupTransport();\n    }\n  }, {\n    key: '_disconnect',\n    value: function _disconnect(reason, shouldReconnect) {\n\n      if (this._isDisconnected()) {\n        return;\n      }\n\n      this._debug('disconnected:', reason, shouldReconnect);\n\n      var reconnect = shouldReconnect || false;\n\n      if (reconnect === false) {\n        this._reconnect = false;\n      }\n\n      this._clearConnectedState(reconnect);\n\n      if (!this._isDisconnected()) {\n        this._setStatus('disconnected');\n        if (this._refreshTimeout) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._reconnecting === false) {\n          this.emit('disconnect', {\n            reason: reason,\n            reconnect: reconnect\n          });\n        }\n      }\n\n      if (!this._transportClosed) {\n        this._transport.close();\n      }\n    }\n  }, {\n    key: '_refreshFailed',\n    value: function _refreshFailed() {\n      this._numRefreshFailed = 0;\n      if (!this._isDisconnected()) {\n        this._disconnect('refresh failed', false);\n      }\n      if (this._config.onRefreshFailed !== null) {\n        this._config.onRefreshFailed();\n      }\n    }\n  }, {\n    key: '_refresh',\n    value: function _refresh() {\n      var _this6 = this;\n\n      // ask application for new connection token.\n      this._debug('refresh token');\n\n      if (this._config.refreshAttempts === 0) {\n        this._debug('refresh attempts set to 0, do not send refresh request at all');\n        this._refreshFailed();\n        return;\n      }\n\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n\n      var cb = function cb(resp) {\n        if (resp.error || resp.status !== 200) {\n          // We don't perform any connection status related actions here as we are\n          // relying on server that must close connection eventually.\n          if (resp.error) {\n            _this6._debug('error refreshing connection token', resp.error);\n          } else {\n            _this6._debug('error refreshing connection token: wrong status code', resp.status);\n          }\n          _this6._numRefreshFailed++;\n          if (_this6._refreshTimeout !== null) {\n            clearTimeout(_this6._refreshTimeout);\n            _this6._refreshTimeout = null;\n          }\n          if (_this6._config.refreshAttempts !== null && _this6._numRefreshFailed >= _this6._config.refreshAttempts) {\n            _this6._refreshFailed();\n            return;\n          }\n          var jitter = Math.round(Math.random() * 1000 * Math.max(_this6._numRefreshFailed, 20));\n          var interval = _this6._config.refreshInterval + jitter;\n          _this6._refreshTimeout = setTimeout(function () {\n            return _this6._refresh();\n          }, interval);\n          return;\n        }\n        _this6._numRefreshFailed = 0;\n        _this6._token = resp.data.token;\n        if (!_this6._token) {\n          _this6._refreshFailed();\n          return;\n        }\n        if (_this6._isDisconnected() && _this6._reconnect) {\n          _this6._debug('token refreshed, connect from scratch');\n          _this6._connect();\n        } else {\n          _this6._debug('send refreshed token');\n          var msg = {\n            method: _this6._methodType.REFRESH,\n            params: {\n              token: _this6._token\n            }\n          };\n          _this6._call(msg).then(function (result) {\n            _this6._refreshResponse(_this6._decoder.decodeCommandResult(_this6._methodType.REFRESH, result));\n          }, function (err) {\n            _this6._refreshError(err);\n          });\n        }\n      };\n\n      if (this._config.onRefresh !== null) {\n        var context = {};\n        this._config.onRefresh(context, cb);\n      } else {\n        this._ajax(this._config.refreshEndpoint, this._config.refreshParams, this._config.refreshHeaders, this._config.refreshData, cb);\n      }\n    }\n  }, {\n    key: '_refreshError',\n    value: function _refreshError(err) {\n      var _this7 = this;\n\n      this._debug('refresh error', err);\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      var interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n      this._refreshTimeout = setTimeout(function () {\n        return _this7._refresh();\n      }, interval);\n    }\n  }, {\n    key: '_refreshResponse',\n    value: function _refreshResponse(result) {\n      var _this8 = this;\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      if (result.expires) {\n        this._clientID = result.client;\n        this._refreshTimeout = setTimeout(function () {\n          return _this8._refresh();\n        }, result.ttl * 1000);\n      }\n    }\n  }, {\n    key: '_subRefresh',\n    value: function _subRefresh(channel) {\n      var _this9 = this;\n\n      this._debug('refresh subscription token for channel', channel);\n\n      if (this._subRefreshTimeouts[channel] !== undefined) {\n        this._clearSubRefreshTimeout(channel);\n      } else {\n        return;\n      }\n\n      var cb = function cb(resp) {\n        if (resp.error || resp.status !== 200) {\n          return;\n        }\n\n        var channelsData = {};\n        if (resp.data.channels) {\n          for (var i in data.channels) {\n            var channelData = resp.data.channels[i];\n            if (!channelData.channel) {\n              continue;\n            }\n            channelsData[channelData.channel] = channelData.token;\n          }\n        }\n\n        var token = channelsData[channel];\n        if (!token) {\n          return;\n        }\n        var msg = {\n          method: _this9._methodType.SUB_REFRESH,\n          params: {\n            channel: channel,\n            token: token\n          }\n        };\n\n        var sub = _this9._getSub(channel);\n        if (sub === null) {\n          return;\n        }\n\n        _this9._call(msg).then(function (result) {\n          _this9._subRefreshResponse(channel, _this9._decoder.decodeCommandResult(_this9._methodType.SUB_REFRESH, result));\n        }, function (err) {\n          _this9._subRefreshError(channel, err);\n        });\n      };\n\n      var data = {\n        client: this._clientID,\n        channels: [channel]\n      };\n\n      if (this._config.onPrivateSubscribe !== null) {\n        this._config.onPrivateSubscribe({\n          data: data\n        }, cb);\n      } else {\n        this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      }\n    }\n  }, {\n    key: '_clearSubRefreshTimeout',\n    value: function _clearSubRefreshTimeout(channel) {\n      if (this._subRefreshTimeouts[channel] !== undefined) {\n        clearTimeout(this._subRefreshTimeouts[channel]);\n        delete this._subRefreshTimeouts[channel];\n      }\n    }\n  }, {\n    key: '_subRefreshError',\n    value: function _subRefreshError(channel, err) {\n      var _this10 = this;\n\n      this._debug('subscription refresh error', channel, err);\n      this._clearSubRefreshTimeout(channel);\n      var sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n      var jitter = Math.round(Math.random() * 1000);\n      var subRefreshTimeout = setTimeout(function () {\n        return _this10._subRefresh(channel);\n      }, this._config.subRefreshInterval + jitter);\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      return;\n    }\n  }, {\n    key: '_subRefreshResponse',\n    value: function _subRefreshResponse(channel, result) {\n      var _this11 = this;\n\n      this._debug('subscription refresh success', channel);\n      this._clearSubRefreshTimeout(channel);\n      var sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n      if (result.expires === true) {\n        var subRefreshTimeout = setTimeout(function () {\n          return _this11._subRefresh(channel);\n        }, result.ttl * 1000);\n        this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      }\n      return;\n    }\n  }, {\n    key: '_subscribe',\n    value: function _subscribe(sub, isResubscribe) {\n      var _this12 = this;\n\n      this._debug('subscribing on', sub.channel);\n      var channel = sub.channel;\n\n      if (!(channel in this._subs)) {\n        this._subs[channel] = sub;\n      }\n\n      if (!this.isConnected()) {\n        // subscribe will be called later\n        sub._setNew();\n        return;\n      }\n\n      sub._setSubscribing(isResubscribe);\n\n      var msg = {\n        method: this._methodType.SUBSCRIBE,\n        params: {\n          channel: channel\n        }\n      };\n\n      // If channel name does not start with privateChannelPrefix - then we\n      // can just send subscription message to Centrifuge. If channel name\n      // starts with privateChannelPrefix - then this is a private channel\n      // and we should ask web application backend for permission first.\n      if ((0, _utils.startsWith)(channel, this._config.privateChannelPrefix)) {\n        // private channel.\n        if (this._isSubscribeBatching) {\n          this._privateChannels[channel] = true;\n        } else {\n          this.startSubscribeBatching();\n          this._subscribe(sub);\n          this.stopSubscribeBatching();\n        }\n      } else {\n        var recover = sub._needRecover();\n\n        if (recover === true) {\n          msg.params.recover = true;\n          var last = this._getLastID(channel);\n          if (last !== '') {\n            msg.params.last = last;\n          }\n          var since = sub._since;\n          if (since) {\n            msg.params.since = since;\n          }\n        }\n\n        this._call(msg).then(function (result) {\n          _this12._subscribeResponse(channel, _this12._decoder.decodeCommandResult(_this12._methodType.SUBSCRIBE, result));\n        }, function (err) {\n          _this12._subscribeError(err);\n        });\n      }\n    }\n  }, {\n    key: '_unsubscribe',\n    value: function _unsubscribe(sub) {\n      if (this.isConnected()) {\n        // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n        this._addMessage({\n          method: this._methodType.UNSUBSCRIBE,\n          params: {\n            channel: sub.channel\n          }\n        });\n      }\n    }\n  }, {\n    key: 'getSub',\n    value: function getSub(channel) {\n      return this._getSub(channel);\n    }\n  }, {\n    key: '_getSub',\n    value: function _getSub(channel) {\n      var sub = this._subs[channel];\n      if (!sub) {\n        return null;\n      }\n      return sub;\n    }\n  }, {\n    key: '_getSince',\n    value: function _getSince() {\n      var now = new Date();\n      var delta = Math.floor((now - this._connectedAt) / 1000);\n      return this._serverTime + delta;\n    }\n  }, {\n    key: '_connectResponse',\n    value: function _connectResponse(result) {\n      var _this13 = this;\n\n      var wasReconnecting = this._reconnecting;\n      this._reconnecting = false;\n      this._resetRetry();\n\n      if (this.isConnected()) {\n        return;\n      }\n\n      if (this._latencyStart !== null) {\n        this._latency = new Date().getTime() - this._latencyStart.getTime();\n        this._latencyStart = null;\n      }\n\n      this._clientID = result.client;\n      this._serverTime = result.time;\n      this._connectedAt = new Date();\n      this._setStatus('connected');\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n      }\n\n      if (result.expires) {\n        this._refreshTimeout = setTimeout(function () {\n          return _this13._refresh();\n        }, result.ttl * 1000);\n      }\n\n      this.startBatching();\n      this.startSubscribeBatching();\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n          if (sub._shouldResubscribe()) {\n            this._subscribe(sub, wasReconnecting);\n          }\n        }\n      }\n      this.stopSubscribeBatching();\n      this.stopBatching();\n\n      this._restartPing();\n\n      var ctx = {\n        client: result.client,\n        transport: this._transportName,\n        latency: this._latency\n      };\n      if (result.data) {\n        ctx.data = result.data;\n      }\n\n      this.emit('connect', ctx);\n    }\n  }, {\n    key: '_stopPing',\n    value: function _stopPing() {\n      if (this._pongTimeout !== null) {\n        clearTimeout(this._pongTimeout);\n        this._pongTimeout = null;\n      }\n      if (this._pingInterval !== null) {\n        clearInterval(this._pingInterval);\n        this._pingInterval = null;\n      }\n    }\n  }, {\n    key: '_startPing',\n    value: function _startPing() {\n      var _this14 = this;\n\n      if (this._config.ping !== true || this._config.pingInterval <= 0) {\n        return;\n      }\n      if (!this.isConnected()) {\n        return;\n      }\n\n      this._pingInterval = setInterval(function () {\n        if (!_this14.isConnected()) {\n          _this14._stopPing();\n          return;\n        }\n        _this14.ping();\n        _this14._pongTimeout = setTimeout(function () {\n          _this14._disconnect('no ping', true);\n        }, _this14._config.pongWaitTimeout);\n      }, this._config.pingInterval);\n    }\n  }, {\n    key: '_restartPing',\n    value: function _restartPing() {\n      this._stopPing();\n      this._startPing();\n    }\n  }, {\n    key: '_subscribeError',\n    value: function _subscribeError(channel, error) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n      if (error.code === 0 && error.message === _errorTimeout) {\n        // client side timeout.\n        this._disconnect('timeout', true);\n        return;\n      }\n      sub._setSubscribeError(error);\n    }\n  }, {\n    key: '_subscribeResponse',\n    value: function _subscribeResponse(channel, result) {\n      var _this15 = this;\n\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n\n      if (result.expired === true) {\n        sub._setSubscribeError(this._createErrorObject('token expired'));\n        return;\n      }\n\n      var recovered = false;\n      if ('recovered' in result) {\n        recovered = result.recovered;\n      }\n      sub._setSubscribeSuccess(recovered);\n\n      var pubs = result.publications;\n\n      if (pubs && pubs.length > 0) {\n        // handle missed pubs.\n        pubs = pubs.reverse();\n        for (var i in pubs) {\n          if (pubs.hasOwnProperty(i)) {\n            this._handlePublication(channel, pubs[i]);\n          }\n        }\n      } else {\n        if ('last' in result) {\n          // no missed messages found so set last message id from result.\n          this._lastPubUID[channel] = result.last;\n        }\n      }\n\n      if (result.expires === true) {\n        var subRefreshTimeout = setTimeout(function () {\n          return _this15._subRefresh(channel);\n        }, result.ttl * 1000);\n        this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      }\n    }\n  }, {\n    key: '_handleReply',\n    value: function _handleReply(reply) {\n      var id = reply.id;\n      var result = reply.result;\n\n      if (!(id in this._callbacks)) {\n        return;\n      }\n      var callbacks = this._callbacks[id];\n      clearTimeout(this._callbacks[id].timeout);\n      delete this._callbacks[id];\n\n      if (!(0, _utils.errorExists)(reply)) {\n        var callback = callbacks.callback;\n        if (!callback) {\n          return;\n        }\n        callback(result);\n      } else {\n        var errback = callbacks.errback;\n        if (!errback) {\n          return;\n        }\n        errback(reply.error);\n      }\n    }\n  }, {\n    key: '_handleJoin',\n    value: function _handleJoin(channel, join) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('join', join);\n    }\n  }, {\n    key: '_handleLeave',\n    value: function _handleLeave(channel, leave) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('leave', leave);\n    }\n  }, {\n    key: '_handleUnsub',\n    value: function _handleUnsub(channel, unsub) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.unsubscribe();\n      if (unsub.resubscribe === true) {\n        sub.subscribe();\n      }\n    }\n  }, {\n    key: '_handlePublication',\n    value: function _handlePublication(channel, pub) {\n      // keep last uid received from channel.\n      this._lastPubUID[channel] = pub.uid;\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('publish', pub);\n    }\n  }, {\n    key: '_handleMessage',\n    value: function _handleMessage(message) {\n      this.emit('message', message.data);\n    }\n  }, {\n    key: '_handlePush',\n    value: function _handlePush(data) {\n      var push = this._decoder.decodePush(data);\n      var type = 0;\n      if ('type' in push) {\n        type = push['type'];\n      }\n      var channel = push.channel;\n\n      if (type === this._pushType.PUBLICATION) {\n        var pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n        this._handlePublication(channel, pub);\n      } else if (type === this._pushType.MESSAGE) {\n        var message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n        this._handleMessage(message);\n      } else if (type === this._pushType.JOIN) {\n        var join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n        this._handleJoin(channel, join);\n      } else if (type === this._pushType.LEAVE) {\n        var leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n        this._handleLeave(channel, leave);\n      } else if (type === this._pushType.UNSUB) {\n        var unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n        this._handleUnsub(channel, unsub);\n      }\n    }\n  }, {\n    key: '_dispatchReply',\n    value: function _dispatchReply(reply) {\n      if (reply === undefined || reply === null) {\n        this._debug('dispatch: got undefined or null reply');\n        return;\n      }\n\n      var id = reply.id;\n\n      if (id && id > 0) {\n        this._handleReply(reply);\n      } else {\n        this._handlePush(reply.result);\n      }\n    }\n  }, {\n    key: '_flush',\n    value: function _flush() {\n      var messages = this._messages.slice(0);\n      this._messages = [];\n      this._transportSend(messages);\n    }\n  }, {\n    key: '_ping',\n    value: function _ping() {\n      this._addMessage({\n        method: this._methodType.PING\n      });\n    }\n  }, {\n    key: '_getLastID',\n    value: function _getLastID(channel) {\n      var lastUID = this._lastPubUID[channel];\n\n      if (lastUID) {\n        this._debug('last uid found and sent for channel', channel);\n        return lastUID;\n      }\n      this._debug('no last uid found for channel', channel);\n      return '';\n    }\n  }, {\n    key: '_createErrorObject',\n    value: function _createErrorObject(message, code) {\n      var errObject = {\n        message: message,\n        code: code || 0\n      };\n\n      return errObject;\n    }\n  }, {\n    key: '_registerCall',\n    value: function _registerCall(id, callback, errback) {\n      var _this16 = this;\n\n      this._callbacks[id] = {\n        callback: callback,\n        errback: errback,\n        timeout: null\n      };\n      this._callbacks[id].timeout = setTimeout(function () {\n        delete _this16._callbacks[id];\n        if ((0, _utils.isFunction)(errback)) {\n          errback(_this16._createErrorObject(_errorTimeout));\n        }\n      }, this._config.timeout);\n    }\n  }, {\n    key: '_addMessage',\n    value: function _addMessage(message, async) {\n      var id = void 0;\n      if (!async) {\n        id = this._nextMessageId();\n        message.id = id;\n      }\n      if (this._isBatching === true) {\n        this._messages.push(message);\n      } else {\n        this._transportSend([message]);\n      }\n      if (!async) {\n        return id;\n      }\n      return 0;\n    }\n  }, {\n    key: 'isConnected',\n    value: function isConnected() {\n      return this._isConnected();\n    }\n  }, {\n    key: 'connect',\n    value: function connect() {\n      this._connect();\n    }\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this._disconnect('client', false);\n    }\n  }, {\n    key: 'ping',\n    value: function ping() {\n      return this._ping();\n    }\n  }, {\n    key: 'startBatching',\n    value: function startBatching() {\n      // start collecting messages without sending them to Centrifuge until flush\n      // method called\n      this._isBatching = true;\n    }\n  }, {\n    key: 'stopBatching',\n    value: function stopBatching() {\n      this._isBatching = false;\n      this._flush();\n    }\n  }, {\n    key: 'startSubscribeBatching',\n    value: function startSubscribeBatching() {\n      // start collecting private channels to create bulk authentication\n      // request to subscribeEndpoint when stopSubscribeBatching will be called\n      this._isSubscribeBatching = true;\n    }\n  }, {\n    key: 'stopSubscribeBatching',\n    value: function stopSubscribeBatching() {\n      var _this17 = this;\n\n      // create request to subscribeEndpoint with collected private channels\n      // to ask if this client can subscribe on each channel\n      this._isSubscribeBatching = false;\n      var authChannels = this._privateChannels;\n      this._privateChannels = {};\n\n      var channels = [];\n\n      for (var channel in authChannels) {\n        if (authChannels.hasOwnProperty(channel)) {\n          var sub = this._getSub(channel);\n          if (!sub) {\n            continue;\n          }\n          channels.push(channel);\n        }\n      }\n\n      if (channels.length === 0) {\n        this._debug('no private channels found, no need to make request');\n        return;\n      }\n\n      var data = {\n        client: this._clientID,\n        channels: channels\n      };\n\n      var cb = function cb(resp) {\n        if (resp.error || resp.status !== 200) {\n          _this17._debug('authorization request failed');\n          for (var i in channels) {\n            if (channels.hasOwnProperty(i)) {\n              var _channel2 = channels[i];\n              _this17._subscribeError(_channel2, _this17._createErrorObject('authorization request failed'));\n            }\n          }\n          return;\n        }\n\n        var channelsData = {};\n        if (resp.data.channels) {\n          for (var _i in resp.data.channels) {\n            var channelData = resp.data.channels[_i];\n            if (!channelData.channel) {\n              continue;\n            }\n            channelsData[channelData.channel] = channelData.token;\n          }\n        }\n\n        // try to send all subscriptions in one request.\n        var batch = false;\n\n        if (!_this17._isBatching) {\n          _this17.startBatching();\n          batch = true;\n        }\n\n        for (var _i2 in channels) {\n          if (channels.hasOwnProperty(_i2)) {\n            var _ret = function () {\n              var channel = channels[_i2];\n              var token = channelsData[channel];\n\n              if (!token) {\n                // subscription:error\n                _this17._subscribeError(channel, _this17._createErrorObject('permission denied', 103));\n                return 'continue';\n              } else {\n                var msg = {\n                  method: _this17._methodType.SUBSCRIBE,\n                  params: {\n                    channel: channel,\n                    token: token\n                  }\n                };\n\n                var _sub = _this17._getSub(channel);\n                if (_sub === null) {\n                  return 'continue';\n                }\n\n                var recover = _sub._needRecover();\n\n                if (recover === true) {\n                  msg.params.recover = true;\n                  var last = _this17._getLastID(channel);\n                  if (last !== '') {\n                    msg.params.last = last;\n                  }\n                  if (_sub._since) {\n                    msg.params.since = _sub._since;\n                  }\n                }\n                _this17._call(msg).then(function (result) {\n                  _this17._subscribeResponse(channel, _this17._decoder.decodeCommandResult(_this17._methodType.SUBSCRIBE, result));\n                }, function (err) {\n                  _this17._subscribeError(channel, err);\n                });\n              }\n            }();\n\n            if (_ret === 'continue') continue;\n          }\n        }\n\n        if (batch) {\n          _this17.stopBatching();\n        }\n      };\n\n      if (this._config.onPrivateSubscribe !== null) {\n        this._config.onPrivateSubscribe({\n          data: data\n        }, cb);\n      } else {\n        this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe(channel, events) {\n      var currentSub = this._getSub(channel);\n      if (currentSub !== null) {\n        currentSub._setEvents(events);\n        if (currentSub._isUnsubscribed()) {\n          currentSub.subscribe();\n        }\n        return currentSub;\n      }\n      var sub = new _subscription2.default(this, channel, events);\n      this._subs[channel] = sub;\n      sub.subscribe();\n      return sub;\n    }\n  }]);\n\n  return Centrifuge;\n}(_events2.default);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n\n/***/ 11:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _STATE_NEW = 0;\nvar _STATE_SUBSCRIBING = 1;\nvar _STATE_SUCCESS = 2;\nvar _STATE_ERROR = 3;\nvar _STATE_UNSUBSCRIBED = 4;\n\nvar Subscription = function (_EventEmitter) {\n  _inherits(Subscription, _EventEmitter);\n\n  function Subscription(centrifuge, channel, events) {\n    _classCallCheck(this, Subscription);\n\n    var _this = _possibleConstructorReturn(this, (Subscription.__proto__ || Object.getPrototypeOf(Subscription)).call(this));\n\n    _this.channel = channel;\n    _this._centrifuge = centrifuge;\n    _this._status = _STATE_NEW;\n    _this._error = null;\n    _this._isResubscribe = false;\n    _this._ready = false;\n    _this._subscriptionPromise = null;\n    _this._noResubscribe = false;\n    _this._since = null;\n    _this._setEvents(events);\n    _this._initializePromise();\n    return _this;\n  }\n\n  _createClass(Subscription, [{\n    key: '_initializePromise',\n    value: function _initializePromise() {\n      var _this2 = this;\n\n      // this helps us to wait until subscription will successfully\n      // subscribe and call actions such as presence, history etc in\n      // synchronous way.\n      this._ready = false;\n\n      this._subscriptionPromise = new global.Promise(function (resolve, reject) {\n        _this2._resolve = function (value) {\n          _this2._ready = true;\n          resolve(value);\n        };\n        _this2._reject = function (err) {\n          _this2._ready = true;\n          reject(err);\n        };\n      });\n    }\n  }, {\n    key: '_needRecover',\n    value: function _needRecover() {\n      return this._since !== null;\n    }\n  }, {\n    key: '_setEvents',\n    value: function _setEvents(events) {\n      if (!events) {\n        return;\n      }\n      if ((0, _utils.isFunction)(events)) {\n        // events is just a function to handle publication received from channel.\n        this.on('publish', events);\n      } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n        var knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n        for (var i = 0, l = knownEvents.length; i < l; i++) {\n          var ev = knownEvents[i];\n          if (ev in events) {\n            this.on(ev, events[ev]);\n          }\n        }\n      }\n    }\n  }, {\n    key: '_isNew',\n    value: function _isNew() {\n      return this._status === _STATE_NEW;\n    }\n  }, {\n    key: '_isUnsubscribed',\n    value: function _isUnsubscribed() {\n      return this._status === _STATE_UNSUBSCRIBED;\n    }\n  }, {\n    key: '_isSubscribing',\n    value: function _isSubscribing() {\n      return this._status === _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_isReady',\n    value: function _isReady() {\n      return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_isSuccess',\n    value: function _isSuccess() {\n      return this._status === _STATE_SUCCESS;\n    }\n  }, {\n    key: '_isError',\n    value: function _isError() {\n      return this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_setNew',\n    value: function _setNew() {\n      this._status = _STATE_NEW;\n    }\n  }, {\n    key: '_setSubscribing',\n    value: function _setSubscribing(isResubscribe) {\n      this._isResubscribe = isResubscribe || false;\n      if (this._ready === true) {\n        // new promise for this subscription\n        this._initializePromise();\n      }\n      this._status = _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_setSubscribeSuccess',\n    value: function _setSubscribeSuccess(recovered) {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._status = _STATE_SUCCESS;\n      var successContext = this._getSubscribeSuccessContext(recovered);\n\n      this._since = null;\n      this.emit('subscribe', successContext);\n      this._resolve(successContext);\n    }\n  }, {\n    key: '_setSubscribeError',\n    value: function _setSubscribeError(err) {\n      if (this._status === _STATE_ERROR) {\n        return;\n      }\n      this._status = _STATE_ERROR;\n      this._error = err;\n      var errContext = this._getSubscribeErrorContext();\n\n      this.emit('error', errContext);\n      this._reject(errContext);\n    }\n  }, {\n    key: '_triggerUnsubscribe',\n    value: function _triggerUnsubscribe() {\n      this.emit('unsubscribe', {\n        channel: this.channel\n      });\n    }\n  }, {\n    key: '_setUnsubscribed',\n    value: function _setUnsubscribed(noResubscribe) {\n      this._centrifuge._clearSubRefreshTimeout(this.channel);\n      if (this._status === _STATE_UNSUBSCRIBED) {\n        return;\n      }\n      var needTrigger = this._status === _STATE_SUCCESS;\n      this._status = _STATE_UNSUBSCRIBED;\n      if (noResubscribe === true) {\n        this._since = null;\n        this._noResubscribe = true;\n        delete this._centrifuge._lastPubUID[this.channel];\n      }\n      if (needTrigger) {\n        this._triggerUnsubscribe();\n      }\n    }\n  }, {\n    key: '_shouldResubscribe',\n    value: function _shouldResubscribe() {\n      return !this._noResubscribe;\n    }\n  }, {\n    key: '_getSubscribeSuccessContext',\n    value: function _getSubscribeSuccessContext(recovered) {\n      return {\n        channel: this.channel,\n        isResubscribe: this._isResubscribe,\n        recovered: recovered\n      };\n    }\n  }, {\n    key: '_getSubscribeErrorContext',\n    value: function _getSubscribeErrorContext() {\n      var subscribeErrorContext = this._error;\n      subscribeErrorContext.channel = this.channel;\n      subscribeErrorContext.isResubscribe = this._isResubscribe;\n      return subscribeErrorContext;\n    }\n  }, {\n    key: 'ready',\n    value: function ready(callback, errback) {\n      if (this._ready) {\n        if (this._isSuccess()) {\n          callback(this._getSubscribeSuccessContext());\n        } else {\n          errback(this._getSubscribeErrorContext());\n        }\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe() {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._noResubscribe = false;\n      this._centrifuge._subscribe(this);\n    }\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      this._setUnsubscribed(true);\n      this._centrifuge._unsubscribe(this);\n    }\n  }, {\n    key: '_methodCall',\n    value: function _methodCall(message, type) {\n      var _this3 = this;\n\n      return this._subscriptionPromise.then(function () {\n        return _this3._centrifuge._call(message);\n      }).then(function (result) {\n        return _this3._centrifuge._decoder.decodeCommandResult(type, result);\n      });\n    }\n  }, {\n    key: 'publish',\n    value: function publish(data) {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PUBLISH,\n        params: {\n          channel: this.channel,\n          data: data\n        }\n      }, this._centrifuge._methodType.PUBLISH);\n    }\n  }, {\n    key: 'presence',\n    value: function presence() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE);\n    }\n  }, {\n    key: 'presenceStats',\n    value: function presenceStats() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE_STATS,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE_STATS);\n    }\n  }, {\n    key: 'history',\n    value: function history() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.HISTORY,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.HISTORY);\n    }\n  }]);\n\n  return Subscription;\n}(_events2.default);\n\nexports.default = Subscription;\nmodule.exports = exports['default'];\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n\n/***/ 12:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JsonMethodType = exports.JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nvar JsonPushType = exports.JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4\n};\n\nvar JsonEncoder = exports.JsonEncoder = function () {\n  function JsonEncoder() {\n    _classCallCheck(this, JsonEncoder);\n  }\n\n  _createClass(JsonEncoder, [{\n    key: 'encodeCommands',\n    value: function encodeCommands(commands) {\n      var encodedCommands = [];\n      for (var i in commands) {\n        if (commands.hasOwnProperty(i)) {\n          encodedCommands.push(JSON.stringify(commands[i]));\n        }\n      }\n      return encodedCommands.join('\\n');\n    }\n  }]);\n\n  return JsonEncoder;\n}();\n\nvar JsonDecoder = exports.JsonDecoder = function () {\n  function JsonDecoder() {\n    _classCallCheck(this, JsonDecoder);\n  }\n\n  _createClass(JsonDecoder, [{\n    key: 'decodeReplies',\n    value: function decodeReplies(data) {\n      var replies = [];\n      var encodedReplies = data.split('\\n');\n      for (var i in encodedReplies) {\n        if (encodedReplies.hasOwnProperty(i)) {\n          if (!encodedReplies[i]) {\n            continue;\n          }\n          var reply = JSON.parse(encodedReplies[i]);\n          replies.push(reply);\n        }\n      }\n      return replies;\n    }\n  }, {\n    key: 'decodeCommandResult',\n    value: function decodeCommandResult(methodType, data) {\n      return data;\n    }\n  }, {\n    key: 'decodePush',\n    value: function decodePush(data) {\n      return data;\n    }\n  }, {\n    key: 'decodePushData',\n    value: function decodePushData(pushType, data) {\n      return data;\n    }\n  }]);\n\n  return JsonDecoder;\n}();\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _centrifuge = __webpack_require__(10);\n\nexports.default = _centrifuge.Centrifuge;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 6:\n/***/ (function(module, exports) {\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n/***/ }),\n\n/***/ 7:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startsWith = startsWith;\nexports.isFunction = isFunction;\nexports.log = log;\nexports.backoff = backoff;\nexports.errorExists = errorExists;\nfunction startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nfunction isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nfunction log(level, args) {\n  if (global.console) {\n    var logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nfunction backoff(step, min, max) {\n  var jitter = 0.5 * Math.random();\n  var interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nfunction errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ })\n\n/******/ });\n});\n\n\n// WEBPACK FOOTER //\n// centrifuge.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 31);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 61e580bbbe0b06f92fcf","import EventEmitter from 'events';\nimport Subscription from './subscription';\n\nimport {\n  JsonEncoder,\n  JsonDecoder,\n  JsonMethodType,\n  JsonPushType\n} from './json';\n\nimport {\n  isFunction,\n  log,\n  startsWith,\n  errorExists,\n  backoff\n} from './utils';\n\nconst _errorTimeout = 'timeout';\n\nexport class Centrifuge extends EventEmitter {\n\n  constructor(url, options) {\n    super();\n    this._url = url;\n    this._sockjs = null;\n    this._isSockjs = false;\n    this._binary = false;\n    this._methodType = null;\n    this._pushType = null;\n    this._encoder = null;\n    this._decoder = null;\n    this._status = 'disconnected';\n    this._reconnect = true;\n    this._reconnecting = false;\n    this._transport = null;\n    this._transportName = null;\n    this._transportClosed = true;\n    this._messageId = 0;\n    this._clientID = null;\n    this._refreshRequired = false;\n    this._subs = {};\n    this._lastPubUID = {};\n    this._messages = [];\n    this._isBatching = false;\n    this._isSubscribeBatching = false;\n    this._privateChannels = {};\n    this._numRefreshFailed = 0;\n    this._refreshTimeout = null;\n    this._pingInterval = null;\n    this._pongTimeout = null;\n    this._subRefreshTimeouts = {};\n    this._retries = 0;\n    this._callbacks = {};\n    this._latency = null;\n    this._latencyStart = null;\n    this._connectData = null;\n    this._token = null;\n    this._lastMessageTime = null;\n    this._serverTime = null;\n    this._connectedAt = null;\n    this._config = {\n      debug: false,\n      sockjs: null,\n      promise: null,\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 30000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: [\n        'websocket',\n        'xdr-streaming',\n        'xhr-streaming',\n        'eventsource',\n        'iframe-eventsource',\n        'iframe-htmlfile',\n        'xdr-polling',\n        'xhr-polling',\n        'iframe-xhr-polling',\n        'jsonp-polling'\n      ],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    this._configure(options);\n  }\n\n  setToken(token) {\n    this._token = token;\n  }\n\n  setConnectData(data) {\n    this._connectData = data;\n  }\n\n  _ajax(url, params, headers, data, callback) {\n    let query = '';\n    this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n    const xhr = (global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP'));\n\n    for (const i in params) {\n      if (params.hasOwnProperty(i)) {\n        if (query.length > 0) {\n          query += '&';\n        }\n        query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n      }\n    }\n    if (query.length > 0) {\n      query = '?' + query;\n    }\n    xhr.open('POST', url + query, true);\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    for (const headerName in headers) {\n      if (headers.hasOwnProperty(headerName)) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n      }\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          let data, parsed = false;\n          try {\n            data = JSON.parse(xhr.responseText);\n            parsed = true;\n          } catch (e) {\n            callback({\n              error: 'Invalid JSON. Data was: ' + xhr.responseText,\n              status: 200,\n              data: null\n            });\n          }\n          if (parsed) { // prevents double execution.\n            callback({\n              data: data,\n              status: 200\n            });\n          }\n        } else {\n          this._log('wrong status code in AJAX response', xhr.status);\n          callback({\n            status: xhr.status,\n            data: null\n          });\n        }\n      }\n    };\n    setTimeout(() => xhr.send(JSON.stringify(data)), 20);\n    return xhr;\n  };\n\n  _log() {\n    log('info', arguments);\n  };\n\n  _debug() {\n    if (this._config.debug === true) {\n      log('debug', arguments);\n    }\n  };\n\n  _websocketSupported() {\n    return !(typeof WebSocket !== 'function' && typeof WebSocket !== 'object');\n  };\n\n  _setFormat(format) {\n    if (this._formatOverride(format)) {\n      return;\n    }\n    if (format === 'protobuf') {\n      throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n    }\n    this._binary = false;\n    this._methodType = JsonMethodType;\n    this._pushType = JsonPushType;\n    this._encoder = new JsonEncoder();\n    this._decoder = new JsonDecoder();\n  }\n\n  _formatOverride(format) {\n    return false;\n  }\n\n  _configure(configuration) {\n    if (!('Promise' in global)) {\n      throw new Error('Promise polyfill required');\n    }\n\n    Object.assign(this._config, configuration || {});\n    this._debug('centrifuge config', this._config);\n\n    if (!this._url) {\n      throw new Error('url required');\n    }\n\n    if (startsWith(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n      this._setFormat('protobuf');\n    } else {\n      this._setFormat('json');\n    }\n\n    if (startsWith(this._url, 'http')) {\n      this._debug('client will try to connect to SockJS endpoint');\n      if (this._config.sockjs !== null) {\n        this._debug('SockJS explicitly provided in options');\n        this._sockjs = this._config.sockjs;\n      } else {\n        if (typeof global.SockJS === 'undefined') {\n          throw new Error('SockJS not found, use ws:// in url or include SockJS');\n        }\n        this._debug('use globally defined SockJS');\n        this._sockjs = global.SockJS;\n      }\n    } else {\n      this._debug('client will connect to websocket endpoint');\n    }\n  };\n\n  _setStatus(newStatus) {\n    if (this._status !== newStatus) {\n      this._debug('Status', this._status, '->', newStatus);\n      this._status = newStatus;\n    }\n  };\n\n  _isDisconnected() {\n    return this._status === 'disconnected';\n  };\n\n  _isConnecting() {\n    return this._status === 'connecting';\n  };\n\n  _isConnected() {\n    return this._status === 'connected';\n  };\n\n  _nextMessageId() {\n    return ++this._messageId;\n  };\n\n  _resetRetry() {\n    this._debug('reset retries count to 0');\n    this._retries = 0;\n  };\n\n  _getRetryInterval() {\n    const interval = backoff(this._retries, this._config.minRetry, this._config.maxRetry);\n\n    this._retries += 1;\n    return interval;\n  };\n\n  _clearConnectedState(reconnect) {\n    this._clientID = null;\n\n    // fire errbacks of registered outgoing calls.\n    for (const id in this._callbacks) {\n      if (this._callbacks.hasOwnProperty(id)) {\n        const callbacks = this._callbacks[id];\n        clearTimeout(callbacks.timeout);\n        const errback = callbacks.errback;\n        if (!errback) {\n          continue;\n        }\n        errback(this._createErrorObject('disconnected'));\n      }\n    }\n    this._callbacks = {};\n\n    // fire unsubscribe events\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n\n        if (reconnect) {\n          if (sub._isSuccess()) {\n            sub._triggerUnsubscribe();\n            sub._since = this._getSince();\n          }\n          sub._setSubscribing();\n        } else {\n          sub._setUnsubscribed();\n        }\n      }\n    }\n\n    // clear refresh timer\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    // clear sub refresh timers\n    for (const channel in this._subRefreshTimeouts) {\n      if (this._subRefreshTimeouts.hasOwnProperty(channel) && this._subRefreshTimeouts[channel]) {\n        this._clearSubRefreshTimeout(channel);\n      }\n    }\n    this._subRefreshTimeouts = {};\n\n    if (!this._reconnect) {\n      // completely clear subscriptions\n      this._subs = {};\n    }\n  };\n\n  _transportSend(commands) {\n    if (!commands.length) {\n      return;\n    }\n    if (!this._transport) {\n      throw new Error('transport not connected');\n    }\n    this._transport.send(this._encoder.encodeCommands(commands));\n  }\n\n  _setupTransport() {\n    this._isSockjs = false;\n\n    // detect transport to use - SockJS or Websocket\n    if (this._sockjs !== null) {\n      const sockjsOptions = {\n        transports: this._config.sockjsTransports\n      };\n\n      if (this._config.sockjsServer !== null) {\n        sockjsOptions.server = this._config.sockjsServer;\n      }\n      this._isSockjs = true;\n      this._transport = new this._sockjs(this._url, null, sockjsOptions);\n    } else {\n      if (!this._websocketSupported()) {\n        this._debug('No Websocket support and no SockJS configured, can not connect');\n        return;\n      }\n      this._transport = new WebSocket(this._url);\n      if (this._binary === true) {\n        this._transport.binaryType = 'arraybuffer';\n      }\n    }\n\n    this._transport.onopen = () => {\n      this._transportClosed = false;\n\n      if (this._isSockjs) {\n        this._transportName = 'sockjs-' + this._transport.transport;\n        this._transport.onheartbeat = () => this._restartPing();\n      } else {\n        this._transportName = 'websocket';\n      }\n\n      // Can omit method here due to zero value.\n      const msg = {\n        // method: this._methodType.CONNECT\n      };\n\n      if (this._token || this._connectData) {\n        msg.params = {};\n      }\n\n      if (this._token) {\n        msg.params.token = this._token;\n      }\n\n      if (this._connectData) {\n        msg.params.data = this._connectData;\n      }\n\n      this._latencyStart = new Date();\n      this._call(msg).then(result => {\n        this._connectResponse(this._decoder.decodeCommandResult(this._methodType.CONNECT, result));\n      }, err => {\n        if (err.code === 109) { // token expired.\n          this._refreshRequired = true;\n        }\n        this._disconnect('connect error', true);\n      });\n    };\n\n    this._transport.onerror = error => {\n      this._debug('transport level error', error);\n    };\n\n    this._transport.onclose = closeEvent => {\n      this._transportClosed = true;\n      let reason = 'connection closed';\n      let needReconnect = true;\n\n      if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n        try {\n          const advice = JSON.parse(closeEvent.reason);\n          this._debug('reason is an advice object', advice);\n          reason = advice.reason;\n          needReconnect = advice.reconnect;\n          this._lastMessageTime = new Date();\n        } catch (e) {\n          reason = closeEvent.reason;\n          this._debug('reason is a plain string', reason);\n        }\n      }\n\n      // onTransportClose callback should be executed every time transport was closed.\n      // This can be helpful to catch failed connection events (because our disconnect\n      // event only called once and every future attempts to connect do not fire disconnect\n      // event again).\n      if (this._config.onTransportClose !== null) {\n        this._config.onTransportClose({\n          event: closeEvent,\n          reason: reason,\n          reconnect: needReconnect\n        });\n      }\n\n      this._disconnect(reason, needReconnect);\n\n      if (this._reconnect === true) {\n        this._reconnecting = true;\n        const interval = this._getRetryInterval();\n\n        this._debug('reconnect after ' + interval + ' milliseconds');\n        setTimeout(() => {\n          if (this._reconnect === true) {\n            if (this._refreshRequired) {\n              this._refresh();\n            } else {\n              this._connect();\n            }\n          }\n        }, interval);\n      }\n    };\n\n    this._transport.onmessage = event => {\n      this._lastMessageTime = new Date();\n      const replies = this._decoder.decodeReplies(event.data);\n      for (const i in replies) {\n        if (replies.hasOwnProperty(i)) {\n          this._dispatchReply(replies[i]);\n        }\n      }\n      this._restartPing();\n    };\n  };\n\n  rpc(data) {\n    const msg = {\n      method: this._methodType.RPC,\n      params: {\n        data: data\n      }\n    };\n    return this._call(msg).then(result => this._decoder.decodeCommandResult(this._methodType.RPC, result));\n  }\n\n  send(data) {\n    const msg = {\n      method: this._methodType.SEND,\n      params: {\n        data: data\n      }\n    };\n\n    return this._callAsync(msg);\n  }\n\n  _callAsync(msg) {\n    this._addMessage(msg, true);\n  }\n\n  _call(msg) {\n    return new global.Promise((resolve, reject) => {\n      const id = this._addMessage(msg);\n      this._registerCall(id, resolve, reject);\n    });\n  }\n\n  _connect() {\n    if (this.isConnected()) {\n      this._debug('connect called when already connected');\n      return;\n    }\n    if (this._status === 'connecting') {\n      return;\n    }\n\n    this._debug('start connecting');\n    this._setStatus('connecting');\n    this._clientID = null;\n    this._reconnect = true;\n    this._setupTransport();\n  };\n\n  _disconnect(reason, shouldReconnect) {\n\n    if (this._isDisconnected()) {\n      return;\n    }\n\n    this._debug('disconnected:', reason, shouldReconnect);\n\n    const reconnect = shouldReconnect || false;\n\n    if (reconnect === false) {\n      this._reconnect = false;\n    }\n\n    this._clearConnectedState(reconnect);\n\n    if (!this._isDisconnected()) {\n      this._setStatus('disconnected');\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      if (this._reconnecting === false) {\n        this.emit('disconnect', {\n          reason: reason,\n          reconnect: reconnect\n        });\n      }\n    }\n\n    if (!this._transportClosed) {\n      this._transport.close();\n    }\n  };\n\n  _refreshFailed() {\n    this._numRefreshFailed = 0;\n    if (!this._isDisconnected()) {\n      this._disconnect('refresh failed', false);\n    }\n    if (this._config.onRefreshFailed !== null) {\n      this._config.onRefreshFailed();\n    }\n  };\n\n  _refresh() {\n    // ask application for new connection token.\n    this._debug('refresh token');\n\n    if (this._config.refreshAttempts === 0) {\n      this._debug('refresh attempts set to 0, do not send refresh request at all');\n      this._refreshFailed();\n      return;\n    }\n\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    const cb = (resp) => {\n      if (resp.error || resp.status !== 200) {\n        // We don't perform any connection status related actions here as we are\n        // relying on server that must close connection eventually.\n        if (resp.error) {\n          this._debug('error refreshing connection token', resp.error);\n        } else {\n          this._debug('error refreshing connection token: wrong status code', resp.status);\n        }\n        this._numRefreshFailed++;\n        if (this._refreshTimeout !== null) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._config.refreshAttempts !== null && this._numRefreshFailed >= this._config.refreshAttempts) {\n          this._refreshFailed();\n          return;\n        }\n        const jitter = Math.round(Math.random() * 1000 * Math.max(this._numRefreshFailed, 20));\n        const interval = this._config.refreshInterval + jitter;\n        this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n        return;\n      }\n      this._numRefreshFailed = 0;\n      this._token = resp.data.token;\n      if (!this._token) {\n        this._refreshFailed();\n        return;\n      }\n      if (this._isDisconnected() && this._reconnect) {\n        this._debug('token refreshed, connect from scratch');\n        this._connect();\n      } else {\n        this._debug('send refreshed token');\n        const msg = {\n          method: this._methodType.REFRESH,\n          params: {\n            token: this._token\n          }\n        };\n        this._call(msg).then(result => {\n          this._refreshResponse(this._decoder.decodeCommandResult(this._methodType.REFRESH, result));\n        }, err => {\n          this._refreshError(err);\n        });\n      }\n    };\n\n    if (this._config.onRefresh !== null) {\n      const context = {};\n      this._config.onRefresh(context, cb);\n    } else {\n      this._ajax(\n        this._config.refreshEndpoint,\n        this._config.refreshParams,\n        this._config.refreshHeaders,\n        this._config.refreshData,\n        cb\n      );\n    }\n  };\n\n  _refreshError(err) {\n    this._debug('refresh error', err);\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    const interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n    this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n  }\n\n  _refreshResponse(result) {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (result.expires) {\n      this._clientID = result.client;\n      this._refreshTimeout = setTimeout(() => this._refresh(), result.ttl * 1000);\n    }\n  };\n\n  _subRefresh(channel) {\n    this._debug('refresh subscription token for channel', channel);\n\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      this._clearSubRefreshTimeout(channel);\n    } else {\n      return;\n    }\n\n    const cb = (resp) => {\n      if (resp.error || resp.status !== 200) {\n        return;\n      }\n\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      const token = channelsData[channel];\n      if (!token) {\n        return;\n      }\n      const msg = {\n        method: this._methodType.SUB_REFRESH,\n        params: {\n          channel: channel,\n          token: token\n        }\n      };\n\n      const sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n\n      this._call(msg).then(result => {\n        this._subRefreshResponse(channel, this._decoder.decodeCommandResult(this._methodType.SUB_REFRESH, result));\n      }, err => {\n        this._subRefreshError(channel, err);\n      });\n    };\n\n    const data = {\n      client: this._clientID,\n      channels: [channel]\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n    }\n  };\n\n  _clearSubRefreshTimeout(channel) {\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      clearTimeout(this._subRefreshTimeouts[channel]);\n      delete this._subRefreshTimeouts[channel];\n    }\n  }\n\n  _subRefreshError(channel, err) {\n    this._debug('subscription refresh error', channel, err);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    const jitter = Math.round(Math.random() * 1000);\n    let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._config.subRefreshInterval + jitter);\n    this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    return;\n  }\n\n  _subRefreshResponse(channel, result) {\n    this._debug('subscription refresh success', channel);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), result.ttl * 1000);\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n    return;\n  };\n\n  _subscribe(sub, isResubscribe) {\n    this._debug('subscribing on', sub.channel);\n    const channel = sub.channel;\n\n    if (!(channel in this._subs)) {\n      this._subs[channel] = sub;\n    }\n\n    if (!this.isConnected()) {\n      // subscribe will be called later\n      sub._setNew();\n      return;\n    }\n\n    sub._setSubscribing(isResubscribe);\n\n    const msg = {\n      method: this._methodType.SUBSCRIBE,\n      params: {\n        channel: channel\n      }\n    };\n\n    // If channel name does not start with privateChannelPrefix - then we\n    // can just send subscription message to Centrifuge. If channel name\n    // starts with privateChannelPrefix - then this is a private channel\n    // and we should ask web application backend for permission first.\n    if (startsWith(channel, this._config.privateChannelPrefix)) {\n      // private channel.\n      if (this._isSubscribeBatching) {\n        this._privateChannels[channel] = true;\n      } else {\n        this.startSubscribeBatching();\n        this._subscribe(sub);\n        this.stopSubscribeBatching();\n      }\n    } else {\n      const recover = sub._needRecover();\n\n      if (recover === true) {\n        msg.params.recover = true;\n        const last = this._getLastID(channel);\n        if (last !== '') {\n          msg.params.last = last;\n        }\n        const since = sub._since;\n        if (since) {\n          msg.params.since = since;\n        }\n      }\n\n      this._call(msg).then(result => {\n        this._subscribeResponse(channel, this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, result));\n      }, err => {\n        this._subscribeError(err);\n      });\n    }\n  };\n\n  _unsubscribe(sub) {\n    if (this.isConnected()) {\n      // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n      this._addMessage({\n        method: this._methodType.UNSUBSCRIBE,\n        params: {\n          channel: sub.channel\n        }\n      });\n    }\n  };\n\n  getSub(channel) {\n    return this._getSub(channel);\n  }\n\n  _getSub(channel) {\n    const sub = this._subs[channel];\n    if (!sub) {\n      return null;\n    }\n    return sub;\n  };\n\n  _getSince() {\n    const now = new Date();\n    const delta = Math.floor((now - this._connectedAt) / 1000);\n    return this._serverTime + delta;\n  }\n\n  _connectResponse(result) {\n    const wasReconnecting = this._reconnecting;\n    this._reconnecting = false;\n    this._resetRetry();\n\n    if (this.isConnected()) {\n      return;\n    }\n\n    if (this._latencyStart !== null) {\n      this._latency = (new Date()).getTime() - this._latencyStart.getTime();\n      this._latencyStart = null;\n    }\n\n    this._clientID = result.client;\n    this._serverTime = result.time;\n    this._connectedAt = new Date();\n    this._setStatus('connected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n\n    if (result.expires) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), result.ttl * 1000);\n    }\n\n    this.startBatching();\n    this.startSubscribeBatching();\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n        if (sub._shouldResubscribe()) {\n          this._subscribe(sub, wasReconnecting);\n        }\n      }\n    }\n    this.stopSubscribeBatching();\n    this.stopBatching();\n\n    this._restartPing();\n\n    const ctx = {\n      client: result.client,\n      transport: this._transportName,\n      latency: this._latency\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n\n    this.emit('connect', ctx);\n  };\n\n  _stopPing() {\n    if (this._pongTimeout !== null) {\n      clearTimeout(this._pongTimeout);\n      this._pongTimeout = null;\n    }\n    if (this._pingInterval !== null) {\n      clearInterval(this._pingInterval);\n      this._pingInterval = null;\n    }\n  };\n\n  _startPing() {\n    if (this._config.ping !== true || this._config.pingInterval <= 0) {\n      return;\n    }\n    if (!this.isConnected()) {\n      return;\n    }\n\n    this._pingInterval = setInterval(() => {\n      if (!this.isConnected()) {\n        this._stopPing();\n        return;\n      }\n      this.ping();\n      this._pongTimeout = setTimeout(() => {\n        this._disconnect('no ping', true);\n      }, this._config.pongWaitTimeout);\n    }, this._config.pingInterval);\n  };\n\n  _restartPing() {\n    this._stopPing();\n    this._startPing();\n  };\n\n  _subscribeError(channel, error) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    if (error.code === 0 && error.message === _errorTimeout) { // client side timeout.\n      this._disconnect('timeout', true);\n      return;\n    }\n    sub._setSubscribeError(error);\n  };\n\n  _subscribeResponse(channel, result) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n\n    if (result.expired === true) {\n      sub._setSubscribeError(this._createErrorObject('token expired'));\n      return;\n    }\n\n    let recovered = false;\n    if ('recovered' in result) {\n      recovered = result.recovered;\n    }\n    sub._setSubscribeSuccess(recovered);\n\n    let pubs = result.publications;\n\n    if (pubs && pubs.length > 0) {\n      // handle missed pubs.\n      pubs = pubs.reverse();\n      for (let i in pubs) {\n        if (pubs.hasOwnProperty(i)) {\n          this._handlePublication(channel, pubs[i]);\n        }\n      }\n    } else {\n      if ('last' in result) {\n        // no missed messages found so set last message id from result.\n        this._lastPubUID[channel] = result.last;\n      }\n    }\n\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), result.ttl * 1000);\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n  };\n\n  _handleReply(reply) {\n    const id = reply.id;\n    const result = reply.result;\n\n    if (!(id in this._callbacks)) {\n      return;\n    }\n    const callbacks = this._callbacks[id];\n    clearTimeout(this._callbacks[id].timeout);\n    delete this._callbacks[id];\n\n    if (!errorExists(reply)) {\n      const callback = callbacks.callback;\n      if (!callback) {\n        return;\n      }\n      callback(result);\n    } else {\n      const errback = callbacks.errback;\n      if (!errback) {\n        return;\n      }\n      errback(reply.error);\n    }\n  }\n\n  _handleJoin(channel, join) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('join', join);\n  };\n\n  _handleLeave(channel, leave) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('leave', leave);\n  };\n\n  _handleUnsub(channel, unsub) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.unsubscribe();\n    if (unsub.resubscribe === true) {\n      sub.subscribe();\n    }\n  };\n\n  _handlePublication(channel, pub) {\n    // keep last uid received from channel.\n    this._lastPubUID[channel] = pub.uid;\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('publish', pub);\n  };\n\n  _handleMessage(message) {\n    this.emit('message', message.data);\n  };\n\n  _handlePush(data) {\n    const push = this._decoder.decodePush(data);\n    let type = 0;\n    if ('type' in push) {\n      type = push['type'];\n    }\n    const channel = push.channel;\n\n    if (type === this._pushType.PUBLICATION) {\n      const pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n      this._handlePublication(channel, pub);\n    } else if (type === this._pushType.MESSAGE) {\n      const message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n      this._handleMessage(message);\n    } else if (type === this._pushType.JOIN) {\n      const join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n      this._handleJoin(channel, join);\n    } else if (type === this._pushType.LEAVE) {\n      const leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n      this._handleLeave(channel, leave);\n    } else if (type === this._pushType.UNSUB) {\n      const unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n      this._handleUnsub(channel, unsub);\n    }\n  }\n\n  _dispatchReply(reply) {\n    if (reply === undefined || reply === null) {\n      this._debug('dispatch: got undefined or null reply');\n      return;\n    }\n\n    const id = reply.id;\n\n    if (id && id > 0) {\n      this._handleReply(reply);\n    } else {\n      this._handlePush(reply.result);\n    }\n  };\n\n  _flush() {\n    const messages = this._messages.slice(0);\n    this._messages = [];\n    this._transportSend(messages);\n  };\n\n  _ping() {\n    this._addMessage({\n      method: this._methodType.PING\n    });\n  };\n\n  _getLastID(channel) {\n    const lastUID = this._lastPubUID[channel];\n\n    if (lastUID) {\n      this._debug('last uid found and sent for channel', channel);\n      return lastUID;\n    }\n    this._debug('no last uid found for channel', channel);\n    return '';\n  };\n\n  _createErrorObject(message, code) {\n    const errObject = {\n      message: message,\n      code: code || 0\n    };\n\n    return errObject;\n  };\n\n  _registerCall(id, callback, errback) {\n    this._callbacks[id] = {\n      callback: callback,\n      errback: errback,\n      timeout: null\n    };\n    this._callbacks[id].timeout = setTimeout(() => {\n      delete this._callbacks[id];\n      if (isFunction(errback)) {\n        errback(this._createErrorObject(_errorTimeout));\n      }\n    }, this._config.timeout);\n  };\n\n  _addMessage(message, async) {\n    let id;\n    if (!async) {\n      id = this._nextMessageId();\n      message.id = id;\n    }\n    if (this._isBatching === true) {\n      this._messages.push(message);\n    } else {\n      this._transportSend([message]);\n    }\n    if (!async) {\n      return id;\n    }\n    return 0;\n  };\n\n  isConnected() {\n    return this._isConnected();\n  }\n\n  connect() {\n    this._connect();\n  };\n\n  disconnect() {\n    this._disconnect('client', false);\n  };\n\n  ping() {\n    return this._ping();\n  }\n\n  startBatching() {\n    // start collecting messages without sending them to Centrifuge until flush\n    // method called\n    this._isBatching = true;\n  };\n\n  stopBatching() {\n    this._isBatching = false;\n    this._flush();\n  };\n\n  startSubscribeBatching() {\n    // start collecting private channels to create bulk authentication\n    // request to subscribeEndpoint when stopSubscribeBatching will be called\n    this._isSubscribeBatching = true;\n  };\n\n  stopSubscribeBatching() {\n    // create request to subscribeEndpoint with collected private channels\n    // to ask if this client can subscribe on each channel\n    this._isSubscribeBatching = false;\n    const authChannels = this._privateChannels;\n    this._privateChannels = {};\n\n    const channels = [];\n\n    for (const channel in authChannels) {\n      if (authChannels.hasOwnProperty(channel)) {\n        const sub = this._getSub(channel);\n        if (!sub) {\n          continue;\n        }\n        channels.push(channel);\n      }\n    }\n\n    if (channels.length === 0) {\n      this._debug('no private channels found, no need to make request');\n      return;\n    }\n\n    const data = {\n      client: this._clientID,\n      channels: channels\n    };\n\n    const cb = (resp) => {\n      if (resp.error || resp.status !== 200) {\n        this._debug('authorization request failed');\n        for (const i in channels) {\n          if (channels.hasOwnProperty(i)) {\n            const channel = channels[i];\n            this._subscribeError(channel, this._createErrorObject('authorization request failed'));\n          }\n        }\n        return;\n      }\n\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      // try to send all subscriptions in one request.\n      let batch = false;\n\n      if (!this._isBatching) {\n        this.startBatching();\n        batch = true;\n      }\n\n      for (const i in channels) {\n        if (channels.hasOwnProperty(i)) {\n          const channel = channels[i];\n          const token = channelsData[channel];\n\n          if (!token) {\n            // subscription:error\n            this._subscribeError(channel, this._createErrorObject('permission denied', 103));\n            continue;\n          } else {\n            const msg = {\n              method: this._methodType.SUBSCRIBE,\n              params: {\n                channel: channel,\n                token: token\n              }\n            };\n\n            const sub = this._getSub(channel);\n            if (sub === null) {\n              continue;\n            }\n\n            const recover = sub._needRecover();\n\n            if (recover === true) {\n              msg.params.recover = true;\n              const last = this._getLastID(channel);\n              if (last !== '') {\n                msg.params.last = last;\n              }\n              if (sub._since) {\n                msg.params.since = sub._since;\n              }\n            }\n            this._call(msg).then(result => {\n              this._subscribeResponse(channel, this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, result));\n            }, err => {\n              this._subscribeError(channel, err);\n            });\n          }\n        }\n      }\n\n      if (batch) {\n        this.stopBatching();\n      }\n\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n    }\n  };\n\n  subscribe(channel, events) {\n    const currentSub = this._getSub(channel);\n    if (currentSub !== null) {\n      currentSub._setEvents(events);\n      if (currentSub._isUnsubscribed()) {\n        currentSub.subscribe();\n      }\n      return currentSub;\n    }\n    const sub = new Subscription(this, channel, events);\n    this._subs[channel] = sub;\n    sub.subscribe();\n    return sub;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/centrifuge.js","import EventEmitter from 'events';\n\nimport {\n  isFunction\n} from './utils';\n\nconst _STATE_NEW = 0;\nconst _STATE_SUBSCRIBING = 1;\nconst _STATE_SUCCESS = 2;\nconst _STATE_ERROR = 3;\nconst _STATE_UNSUBSCRIBED = 4;\n\nexport default class Subscription extends EventEmitter {\n  constructor(centrifuge, channel, events) {\n    super();\n    this.channel = channel;\n    this._centrifuge = centrifuge;\n    this._status = _STATE_NEW;\n    this._error = null;\n    this._isResubscribe = false;\n    this._ready = false;\n    this._subscriptionPromise = null;\n    this._noResubscribe = false;\n    this._since = null;\n    this._setEvents(events);\n    this._initializePromise();\n  }\n\n  _initializePromise() {\n    // this helps us to wait until subscription will successfully\n    // subscribe and call actions such as presence, history etc in\n    // synchronous way.\n    this._ready = false;\n\n    this._subscriptionPromise = new global.Promise((resolve, reject) => {\n      this._resolve = value => {\n        this._ready = true;\n        resolve(value);\n      };\n      this._reject = err => {\n        this._ready = true;\n        reject(err);\n      };\n    });\n  };\n\n  _needRecover() {\n    return this._since !== null;\n  };\n\n  _setEvents(events) {\n    if (!events) {\n      return;\n    }\n    if (isFunction(events)) {\n      // events is just a function to handle publication received from channel.\n      this.on('publish', events);\n    } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n      const knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n      for (let i = 0, l = knownEvents.length; i < l; i++) {\n        const ev = knownEvents[i];\n        if (ev in events) {\n          this.on(ev, events[ev]);\n        }\n      }\n    }\n  };\n\n  _isNew() {\n    return this._status === _STATE_NEW;\n  };\n\n  _isUnsubscribed() {\n    return this._status === _STATE_UNSUBSCRIBED;\n  };\n\n  _isSubscribing() {\n    return this._status === _STATE_SUBSCRIBING;\n  };\n\n  _isReady() {\n    return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n  };\n\n  _isSuccess() {\n    return this._status === _STATE_SUCCESS;\n  };\n\n  _isError() {\n    return this._status === _STATE_ERROR;\n  };\n\n  _setNew() {\n    this._status = _STATE_NEW;\n  };\n\n  _setSubscribing(isResubscribe) {\n    this._isResubscribe = isResubscribe || false;\n    if (this._ready === true) {\n      // new promise for this subscription\n      this._initializePromise();\n    }\n    this._status = _STATE_SUBSCRIBING;\n  };\n\n  _setSubscribeSuccess(recovered) {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._status = _STATE_SUCCESS;\n    const successContext = this._getSubscribeSuccessContext(recovered);\n\n    this._since = null;\n    this.emit('subscribe', successContext);\n    this._resolve(successContext);\n  };\n\n  _setSubscribeError(err) {\n    if (this._status === _STATE_ERROR) {\n      return;\n    }\n    this._status = _STATE_ERROR;\n    this._error = err;\n    const errContext = this._getSubscribeErrorContext();\n\n    this.emit('error', errContext);\n    this._reject(errContext);\n  };\n\n  _triggerUnsubscribe() {\n    this.emit('unsubscribe', {\n      channel: this.channel\n    });\n  };\n\n  _setUnsubscribed(noResubscribe) {\n    this._centrifuge._clearSubRefreshTimeout(this.channel);\n    if (this._status === _STATE_UNSUBSCRIBED) {\n      return;\n    }\n    const needTrigger = this._status === _STATE_SUCCESS;\n    this._status = _STATE_UNSUBSCRIBED;\n    if (noResubscribe === true) {\n      this._since = null;\n      this._noResubscribe = true;\n      delete this._centrifuge._lastPubUID[this.channel];\n    }\n    if (needTrigger) {\n      this._triggerUnsubscribe();\n    }\n  };\n\n  _shouldResubscribe() {\n    return !this._noResubscribe;\n  };\n\n  _getSubscribeSuccessContext(recovered) {\n    return {\n      channel: this.channel,\n      isResubscribe: this._isResubscribe,\n      recovered: recovered\n    };\n  };\n\n  _getSubscribeErrorContext() {\n    const subscribeErrorContext = this._error;\n    subscribeErrorContext.channel = this.channel;\n    subscribeErrorContext.isResubscribe = this._isResubscribe;\n    return subscribeErrorContext;\n  };\n\n  ready(callback, errback) {\n    if (this._ready) {\n      if (this._isSuccess()) {\n        callback(this._getSubscribeSuccessContext());\n      } else {\n        errback(this._getSubscribeErrorContext());\n      }\n    }\n  };\n\n  subscribe() {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._noResubscribe = false;\n    this._centrifuge._subscribe(this);\n  };\n\n  unsubscribe() {\n    this._setUnsubscribed(true);\n    this._centrifuge._unsubscribe(this);\n  };\n\n  _methodCall(message, type) {\n    return this._subscriptionPromise\n      .then(() => this._centrifuge._call(message))\n      .then(result => this._centrifuge._decoder.decodeCommandResult(type, result))\n    ;\n  }\n\n  publish(data) {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PUBLISH,\n      params: {\n        channel: this.channel,\n        data: data\n      }\n    }, this._centrifuge._methodType.PUBLISH);\n  };\n\n  presence() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE);\n  };\n\n  presenceStats() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE_STATS,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE_STATS);\n  };\n\n  history() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.HISTORY,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.HISTORY);\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/subscription.js","export const JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nexport const JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4\n};\n\nexport class JsonEncoder {\n  encodeCommands(commands) {\n    const encodedCommands = [];\n    for (const i in commands) {\n      if (commands.hasOwnProperty(i)) {\n        encodedCommands.push(JSON.stringify(commands[i]));\n      }\n    }\n    return encodedCommands.join('\\n');\n  }\n}\n\nexport class JsonDecoder {\n  decodeReplies(data) {\n    const replies = [];\n    const encodedReplies = data.split('\\n');\n    for (const i in encodedReplies) {\n      if (encodedReplies.hasOwnProperty(i)) {\n        if (!encodedReplies[i]) {\n          continue;\n        }\n        const reply = JSON.parse(encodedReplies[i]);\n        replies.push(reply);\n      }\n    }\n    return replies;\n  }\n\n  decodeCommandResult(methodType, data) {\n    return data;\n  }\n\n  decodePush(data) {\n    return data;\n  }\n\n  decodePushData(pushType, data) {\n    return data;\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/json.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 3\n// module chunks = 0 1","import {Centrifuge} from './centrifuge.js';\nexport default Centrifuge;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/events/events.js\n// module id = 6\n// module chunks = 0 1","export function startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nexport function isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nexport function log(level, args) {\n  if (global.console) {\n    const logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nexport function backoff(step, min, max) {\n  const jitter = 0.5 * Math.random();\n  const interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nexport function errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js"],"sourceRoot":""}