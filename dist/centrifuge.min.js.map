{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///centrifuge.min.js","webpack:///webpack/bootstrap 6ba5988ead18c7ced9e0","webpack:///./src/centrifuge.js","webpack:///./src/subscription.js","webpack:///./src/json.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/index.js","webpack:///./node_modules/events/events.js","webpack:///./src/utils.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","10","global","_interopRequireDefault","obj","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","Centrifuge","undefined","_typeof","Symbol","iterator","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_events","_events2","_subscription","_subscription2","_json","_utils","_EventEmitter","url","options","_this","getPrototypeOf","_url","_sockjs","_isSockjs","_binary","_methodType","_pushType","_encoder","_decoder","_status","_reconnect","_reconnecting","_transport","_transportName","_transportClosed","_messageId","_clientID","_refreshRequired","_subs","_lastPubUID","_messages","_isBatching","_isSubscribeBatching","_privateChannels","_numRefreshFailed","_refreshTimeout","_pingTimeout","_pongTimeout","_subRefreshTimeouts","_retries","_callbacks","_latency","_latencyStart","_connectData","_token","_serverTime","_hasRecoveryChannel","_config","debug","sockjs","promise","minRetry","maxRetry","timeout","ping","pingInterval","pongWaitTimeout","privateChannelPrefix","onTransportClose","sockjsServer","sockjsTransports","refreshEndpoint","refreshHeaders","refreshParams","refreshData","refreshAttempts","refreshInterval","onRefreshFailed","onRefresh","subscribeEndpoint","subscribeHeaders","subscribeParams","subRefreshInterval","onPrivateSubscribe","_configure","token","data","params","headers","callback","_this2","query","_debug","JSON","stringify","xhr","XMLHttpRequest","ActiveXObject","encodeURIComponent","open","withCredentials","setRequestHeader","headerName","onreadystatechange","readyState","status","parsed","parse","responseText","e","error","_log","setTimeout","send","log","arguments","WebSocket","format","_formatOverride","Error","JsonMethodType","JsonPushType","JsonEncoder","JsonDecoder","configuration","assign","startsWith","indexOf","_setFormat","SockJS","newStatus","interval","backoff","reconnect","_stopPing","id","callbacks","clearTimeout","errback","_createErrorObject","channel","sub","_isSuccess","_triggerUnsubscribe","_since","_getSince","_setSubscribing","_setUnsubscribed","_clearSubRefreshTimeout","commands","encodeCommands","_this3","sockjsOptions","transports","server","_websocketSupported","binaryType","onopen","transport","onheartbeat","_restartPingIfNoRecoveryUsed","msg","Date","_call","then","result","_connectResponse","decodeCommandResult","CONNECT","err","code","_disconnect","onerror","onclose","closeEvent","reason","needReconnect","advice","_lastMessageTime","event","_getRetryInterval","_refresh","_connect","onmessage","replies","decodeReplies","_dispatchReply","_this4","method","RPC","SEND","_callAsync","_addMessage","_this5","Promise","resolve","reject","_registerCall","isConnected","_setStatus","_setupTransport","shouldReconnect","_isDisconnected","_clearConnectedState","emit","close","_this6","_refreshFailed","cb","resp","jitter","Math","round","random","max","REFRESH","_refreshResponse","_refreshError","context","_ajax","_this7","_this8","expires","client","ttl","_this9","channelsData","channels","channelData","SUB_REFRESH","_getSub","_subRefreshResponse","_subRefreshError","_this10","subRefreshTimeout","_subRefresh","_this11","isResubscribe","_this12","_setNew","SUBSCRIBE","startSubscribeBatching","_subscribe","stopSubscribeBatching","_needRecover","recover","last","_getLastID","since","_subscribeResponse","_subscribeError","UNSUBSCRIBE","_this13","wasReconnecting","_resetRetry","getTime","time","startBatching","_shouldResubscribe","stopBatching","_startPing","ctx","latency","_this14","_isSubscribing","message","_setSubscribeError","_this15","recovered","_setSubscribeSuccess","pubs","publications","reverse","_handlePublication","reply","errorExists","join","leave","unsub","unsubscribe","resubscribe","subscribe","pub","uid","push","decodePush","type","PUBLICATION","decodePushData","MESSAGE","_handleMessage","JOIN","_handleJoin","LEAVE","_handleLeave","UNSUB","_handleUnsub","_handleReply","_handlePush","messages","slice","_transportSend","_this16","PING","_pingResponse","lastUID","_this17","isFunction","async","_nextMessageId","_isConnected","_ping","_flush","_this18","authChannels","batch","_ret","events","currentSub","_setEvents","_isUnsubscribed","11","_STATE_NEW","Subscription","centrifuge","_centrifuge","_error","_isResubscribe","_ready","_subscriptionPromise","_noResubscribe","_initializePromise","_resolve","_reject","on","toString","knownEvents","ev","successContext","_getSubscribeSuccessContext","errContext","_getSubscribeErrorContext","noResubscribe","needTrigger","subscribeErrorContext","_unsubscribe","_methodCall","PUBLISH","PRESENCE","PRESENCE_STATS","HISTORY","12","encodedCommands","encodedReplies","split","methodType","pushType","3","g","Function","eval","window","31","6","EventEmitter","_maxListeners","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","er","handler","len","args","listeners","Array","apply","addListener","listener","newListener","warned","console","trace","once","removeListener","fired","list","position","splice","removeAllListeners","listenerCount","evlistener","emitter","7","prefix","lastIndexOf","level","logger","step","min","pow","floor"],"mappings":"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","file":"centrifuge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 31);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Centrifuge = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _subscription = __webpack_require__(11);\n\nvar _subscription2 = _interopRequireDefault(_subscription);\n\nvar _json = __webpack_require__(12);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _errorTimeout = 'timeout';\n\nvar Centrifuge = exports.Centrifuge = function (_EventEmitter) {\n  _inherits(Centrifuge, _EventEmitter);\n\n  function Centrifuge(url, options) {\n    _classCallCheck(this, Centrifuge);\n\n    var _this = _possibleConstructorReturn(this, (Centrifuge.__proto__ || Object.getPrototypeOf(Centrifuge)).call(this));\n\n    _this._url = url;\n    _this._sockjs = null;\n    _this._isSockjs = false;\n    _this._binary = false;\n    _this._methodType = null;\n    _this._pushType = null;\n    _this._encoder = null;\n    _this._decoder = null;\n    _this._status = 'disconnected';\n    _this._reconnect = true;\n    _this._reconnecting = false;\n    _this._transport = null;\n    _this._transportName = null;\n    _this._transportClosed = true;\n    _this._messageId = 0;\n    _this._clientID = null;\n    _this._refreshRequired = false;\n    _this._subs = {};\n    _this._lastPubUID = {};\n    _this._messages = [];\n    _this._isBatching = false;\n    _this._isSubscribeBatching = false;\n    _this._privateChannels = {};\n    _this._numRefreshFailed = 0;\n    _this._refreshTimeout = null;\n    _this._pingTimeout = null;\n    _this._pongTimeout = null;\n    _this._subRefreshTimeouts = {};\n    _this._retries = 0;\n    _this._callbacks = {};\n    _this._latency = null;\n    _this._latencyStart = null;\n    _this._connectData = null;\n    _this._token = null;\n    _this._serverTime = null;\n    _this._hasRecoveryChannel = false;\n    _this._config = {\n      debug: false,\n      sockjs: null,\n      promise: null,\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: ['websocket', 'xdr-streaming', 'xhr-streaming', 'eventsource', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    _this._configure(options);\n    return _this;\n  }\n\n  _createClass(Centrifuge, [{\n    key: 'setToken',\n    value: function setToken(token) {\n      this._token = token;\n    }\n  }, {\n    key: 'setConnectData',\n    value: function setConnectData(data) {\n      this._connectData = data;\n    }\n  }, {\n    key: '_ajax',\n    value: function _ajax(url, params, headers, data, callback) {\n      var _this2 = this;\n\n      var query = '';\n      this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n      var xhr = global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP');\n\n      for (var i in params) {\n        if (params.hasOwnProperty(i)) {\n          if (query.length > 0) {\n            query += '&';\n          }\n          query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n        }\n      }\n      if (query.length > 0) {\n        query = '?' + query;\n      }\n      xhr.open('POST', url + query, true);\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = true;\n      }\n\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      for (var headerName in headers) {\n        if (headers.hasOwnProperty(headerName)) {\n          xhr.setRequestHeader(headerName, headers[headerName]);\n        }\n      }\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var _data = void 0,\n                parsed = false;\n            try {\n              _data = JSON.parse(xhr.responseText);\n              parsed = true;\n            } catch (e) {\n              callback({\n                error: 'Invalid JSON. Data was: ' + xhr.responseText,\n                status: 200,\n                data: null\n              });\n            }\n            if (parsed) {\n              // prevents double execution.\n              callback({\n                data: _data,\n                status: 200\n              });\n            }\n          } else {\n            _this2._log('wrong status code in AJAX response', xhr.status);\n            callback({\n              status: xhr.status,\n              data: null\n            });\n          }\n        }\n      };\n      setTimeout(function () {\n        return xhr.send(JSON.stringify(data));\n      }, 20);\n      return xhr;\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      (0, _utils.log)('info', arguments);\n    }\n  }, {\n    key: '_debug',\n    value: function _debug() {\n      if (this._config.debug === true) {\n        (0, _utils.log)('debug', arguments);\n      }\n    }\n  }, {\n    key: '_websocketSupported',\n    value: function _websocketSupported() {\n      return !(typeof WebSocket !== 'function' && (typeof WebSocket === 'undefined' ? 'undefined' : _typeof(WebSocket)) !== 'object');\n    }\n  }, {\n    key: '_setFormat',\n    value: function _setFormat(format) {\n      if (this._formatOverride(format)) {\n        return;\n      }\n      if (format === 'protobuf') {\n        throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n      }\n      this._binary = false;\n      this._methodType = _json.JsonMethodType;\n      this._pushType = _json.JsonPushType;\n      this._encoder = new _json.JsonEncoder();\n      this._decoder = new _json.JsonDecoder();\n    }\n  }, {\n    key: '_formatOverride',\n    value: function _formatOverride(format) {\n      return false;\n    }\n  }, {\n    key: '_configure',\n    value: function _configure(configuration) {\n      if (!('Promise' in global)) {\n        throw new Error('Promise polyfill required');\n      }\n\n      Object.assign(this._config, configuration || {});\n      this._debug('centrifuge config', this._config);\n\n      if (!this._url) {\n        throw new Error('url required');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n        this._setFormat('protobuf');\n      } else {\n        this._setFormat('json');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'http')) {\n        this._debug('client will try to connect to SockJS endpoint');\n        if (this._config.sockjs !== null) {\n          this._debug('SockJS explicitly provided in options');\n          this._sockjs = this._config.sockjs;\n        } else {\n          if (typeof global.SockJS === 'undefined') {\n            throw new Error('SockJS not found, use ws:// in url or include SockJS');\n          }\n          this._debug('use globally defined SockJS');\n          this._sockjs = global.SockJS;\n        }\n      } else {\n        this._debug('client will connect to websocket endpoint');\n      }\n    }\n  }, {\n    key: '_setStatus',\n    value: function _setStatus(newStatus) {\n      if (this._status !== newStatus) {\n        this._debug('Status', this._status, '->', newStatus);\n        this._status = newStatus;\n      }\n    }\n  }, {\n    key: '_isDisconnected',\n    value: function _isDisconnected() {\n      return this._status === 'disconnected';\n    }\n  }, {\n    key: '_isConnecting',\n    value: function _isConnecting() {\n      return this._status === 'connecting';\n    }\n  }, {\n    key: '_isConnected',\n    value: function _isConnected() {\n      return this._status === 'connected';\n    }\n  }, {\n    key: '_nextMessageId',\n    value: function _nextMessageId() {\n      return ++this._messageId;\n    }\n  }, {\n    key: '_resetRetry',\n    value: function _resetRetry() {\n      this._debug('reset retries count to 0');\n      this._retries = 0;\n    }\n  }, {\n    key: '_getRetryInterval',\n    value: function _getRetryInterval() {\n      var interval = (0, _utils.backoff)(this._retries, this._config.minRetry, this._config.maxRetry);\n\n      this._retries += 1;\n      return interval;\n    }\n  }, {\n    key: '_clearConnectedState',\n    value: function _clearConnectedState(reconnect) {\n      this._clientID = null;\n      this._hasRecoveryChannel = false;\n      this._stopPing();\n\n      // fire errbacks of registered outgoing calls.\n      for (var id in this._callbacks) {\n        if (this._callbacks.hasOwnProperty(id)) {\n          var callbacks = this._callbacks[id];\n          clearTimeout(callbacks.timeout);\n          var errback = callbacks.errback;\n          if (!errback) {\n            continue;\n          }\n          errback(this._createErrorObject('disconnected'));\n        }\n      }\n      this._callbacks = {};\n\n      // fire unsubscribe events\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n\n          if (reconnect) {\n            if (sub._isSuccess()) {\n              sub._triggerUnsubscribe();\n              sub._since = this._getSince();\n            }\n            sub._setSubscribing();\n          } else {\n            sub._setUnsubscribed();\n          }\n        }\n      }\n\n      // clear refresh timer\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n\n      // clear sub refresh timers\n      for (var _channel in this._subRefreshTimeouts) {\n        if (this._subRefreshTimeouts.hasOwnProperty(_channel) && this._subRefreshTimeouts[_channel]) {\n          this._clearSubRefreshTimeout(_channel);\n        }\n      }\n      this._subRefreshTimeouts = {};\n\n      if (!this._reconnect) {\n        // completely clear subscriptions\n        this._subs = {};\n      }\n    }\n  }, {\n    key: '_transportSend',\n    value: function _transportSend(commands) {\n      if (!commands.length) {\n        return;\n      }\n      if (!this._transport) {\n        throw new Error('transport not connected');\n      }\n      this._transport.send(this._encoder.encodeCommands(commands));\n    }\n  }, {\n    key: '_setupTransport',\n    value: function _setupTransport() {\n      var _this3 = this;\n\n      this._isSockjs = false;\n\n      // detect transport to use - SockJS or Websocket\n      if (this._sockjs !== null) {\n        var sockjsOptions = {\n          transports: this._config.sockjsTransports\n        };\n\n        if (this._config.sockjsServer !== null) {\n          sockjsOptions.server = this._config.sockjsServer;\n        }\n        this._isSockjs = true;\n        this._transport = new this._sockjs(this._url, null, sockjsOptions);\n      } else {\n        if (!this._websocketSupported()) {\n          this._debug('No Websocket support and no SockJS configured, can not connect');\n          return;\n        }\n        this._transport = new WebSocket(this._url);\n        if (this._binary === true) {\n          this._transport.binaryType = 'arraybuffer';\n        }\n      }\n\n      this._transport.onopen = function () {\n        _this3._transportClosed = false;\n\n        if (_this3._isSockjs) {\n          _this3._transportName = 'sockjs-' + _this3._transport.transport;\n          _this3._transport.onheartbeat = function () {\n            return _this3._restartPingIfNoRecoveryUsed();\n          };\n        } else {\n          _this3._transportName = 'websocket';\n        }\n\n        // Can omit method here due to zero value.\n        var msg = {\n          // method: this._methodType.CONNECT\n        };\n\n        if (_this3._token || _this3._connectData) {\n          msg.params = {};\n        }\n\n        if (_this3._token) {\n          msg.params.token = _this3._token;\n        }\n\n        if (_this3._connectData) {\n          msg.params.data = _this3._connectData;\n        }\n\n        _this3._latencyStart = new Date();\n        _this3._call(msg).then(function (result) {\n          _this3._connectResponse(_this3._decoder.decodeCommandResult(_this3._methodType.CONNECT, result));\n        }, function (err) {\n          if (err.code === 109) {\n            // token expired.\n            _this3._refreshRequired = true;\n          }\n          _this3._disconnect('connect error', true);\n        });\n      };\n\n      this._transport.onerror = function (error) {\n        _this3._debug('transport level error', error);\n      };\n\n      this._transport.onclose = function (closeEvent) {\n        _this3._transportClosed = true;\n        var reason = 'connection closed';\n        var needReconnect = true;\n\n        if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n          try {\n            var advice = JSON.parse(closeEvent.reason);\n            _this3._debug('reason is an advice object', advice);\n            reason = advice.reason;\n            needReconnect = advice.reconnect;\n            _this3._lastMessageTime = new Date();\n          } catch (e) {\n            reason = closeEvent.reason;\n            _this3._debug('reason is a plain string', reason);\n          }\n        }\n\n        // onTransportClose callback should be executed every time transport was closed.\n        // This can be helpful to catch failed connection events (because our disconnect\n        // event only called once and every future attempts to connect do not fire disconnect\n        // event again).\n        if (_this3._config.onTransportClose !== null) {\n          _this3._config.onTransportClose({\n            event: closeEvent,\n            reason: reason,\n            reconnect: needReconnect\n          });\n        }\n\n        _this3._disconnect(reason, needReconnect);\n\n        if (_this3._reconnect === true) {\n          _this3._reconnecting = true;\n          var interval = _this3._getRetryInterval();\n\n          _this3._debug('reconnect after ' + interval + ' milliseconds');\n          setTimeout(function () {\n            if (_this3._reconnect === true) {\n              if (_this3._refreshRequired) {\n                _this3._refresh();\n              } else {\n                _this3._connect();\n              }\n            }\n          }, interval);\n        }\n      };\n\n      this._transport.onmessage = function (event) {\n        _this3._lastMessageTime = new Date();\n        var replies = _this3._decoder.decodeReplies(event.data);\n        for (var i in replies) {\n          if (replies.hasOwnProperty(i)) {\n            _this3._dispatchReply(replies[i]);\n          }\n        }\n        _this3._restartPingIfNoRecoveryUsed();\n      };\n    }\n  }, {\n    key: 'rpc',\n    value: function rpc(data) {\n      var _this4 = this;\n\n      var msg = {\n        method: this._methodType.RPC,\n        params: {\n          data: data\n        }\n      };\n      return this._call(msg).then(function (result) {\n        return _this4._decoder.decodeCommandResult(_this4._methodType.RPC, result);\n      });\n    }\n  }, {\n    key: 'send',\n    value: function send(data) {\n      var msg = {\n        method: this._methodType.SEND,\n        params: {\n          data: data\n        }\n      };\n\n      return this._callAsync(msg);\n    }\n  }, {\n    key: '_callAsync',\n    value: function _callAsync(msg) {\n      this._addMessage(msg, true);\n    }\n  }, {\n    key: '_call',\n    value: function _call(msg) {\n      var _this5 = this;\n\n      return new global.Promise(function (resolve, reject) {\n        var id = _this5._addMessage(msg);\n        _this5._registerCall(id, resolve, reject);\n      });\n    }\n  }, {\n    key: '_connect',\n    value: function _connect() {\n      if (this.isConnected()) {\n        this._debug('connect called when already connected');\n        return;\n      }\n      if (this._status === 'connecting') {\n        return;\n      }\n\n      this._debug('start connecting');\n      this._setStatus('connecting');\n      this._clientID = null;\n      this._reconnect = true;\n      this._setupTransport();\n    }\n  }, {\n    key: '_disconnect',\n    value: function _disconnect(reason, shouldReconnect) {\n\n      if (this._isDisconnected()) {\n        return;\n      }\n\n      this._debug('disconnected:', reason, shouldReconnect);\n\n      var reconnect = shouldReconnect || false;\n\n      if (reconnect === false) {\n        this._reconnect = false;\n      }\n\n      this._clearConnectedState(reconnect);\n\n      if (!this._isDisconnected()) {\n        this._setStatus('disconnected');\n        if (this._refreshTimeout) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._reconnecting === false) {\n          this.emit('disconnect', {\n            reason: reason,\n            reconnect: reconnect\n          });\n        }\n      }\n\n      if (!this._transportClosed) {\n        this._transport.close();\n      }\n    }\n  }, {\n    key: '_refreshFailed',\n    value: function _refreshFailed() {\n      this._numRefreshFailed = 0;\n      if (!this._isDisconnected()) {\n        this._disconnect('refresh failed', false);\n      }\n      if (this._config.onRefreshFailed !== null) {\n        this._config.onRefreshFailed();\n      }\n    }\n  }, {\n    key: '_refresh',\n    value: function _refresh() {\n      var _this6 = this;\n\n      // ask application for new connection token.\n      this._debug('refresh token');\n\n      if (this._config.refreshAttempts === 0) {\n        this._debug('refresh attempts set to 0, do not send refresh request at all');\n        this._refreshFailed();\n        return;\n      }\n\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n\n      var cb = function cb(resp) {\n        if (resp.error || resp.status !== 200) {\n          // We don't perform any connection status related actions here as we are\n          // relying on server that must close connection eventually.\n          if (resp.error) {\n            _this6._debug('error refreshing connection token', resp.error);\n          } else {\n            _this6._debug('error refreshing connection token: wrong status code', resp.status);\n          }\n          _this6._numRefreshFailed++;\n          if (_this6._refreshTimeout !== null) {\n            clearTimeout(_this6._refreshTimeout);\n            _this6._refreshTimeout = null;\n          }\n          if (_this6._config.refreshAttempts !== null && _this6._numRefreshFailed >= _this6._config.refreshAttempts) {\n            _this6._refreshFailed();\n            return;\n          }\n          var jitter = Math.round(Math.random() * 1000 * Math.max(_this6._numRefreshFailed, 20));\n          var interval = _this6._config.refreshInterval + jitter;\n          _this6._refreshTimeout = setTimeout(function () {\n            return _this6._refresh();\n          }, interval);\n          return;\n        }\n        _this6._numRefreshFailed = 0;\n        _this6._token = resp.data.token;\n        if (!_this6._token) {\n          _this6._refreshFailed();\n          return;\n        }\n        if (_this6._isDisconnected() && _this6._reconnect) {\n          _this6._debug('token refreshed, connect from scratch');\n          _this6._connect();\n        } else {\n          _this6._debug('send refreshed token');\n          var msg = {\n            method: _this6._methodType.REFRESH,\n            params: {\n              token: _this6._token\n            }\n          };\n          _this6._call(msg).then(function (result) {\n            _this6._refreshResponse(_this6._decoder.decodeCommandResult(_this6._methodType.REFRESH, result));\n          }, function (err) {\n            _this6._refreshError(err);\n          });\n        }\n      };\n\n      if (this._config.onRefresh !== null) {\n        var context = {};\n        this._config.onRefresh(context, cb);\n      } else {\n        this._ajax(this._config.refreshEndpoint, this._config.refreshParams, this._config.refreshHeaders, this._config.refreshData, cb);\n      }\n    }\n  }, {\n    key: '_refreshError',\n    value: function _refreshError(err) {\n      var _this7 = this;\n\n      this._debug('refresh error', err);\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      var interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n      this._refreshTimeout = setTimeout(function () {\n        return _this7._refresh();\n      }, interval);\n    }\n  }, {\n    key: '_refreshResponse',\n    value: function _refreshResponse(result) {\n      var _this8 = this;\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      if (result.expires) {\n        this._clientID = result.client;\n        this._refreshTimeout = setTimeout(function () {\n          return _this8._refresh();\n        }, result.ttl * 1000);\n      }\n    }\n  }, {\n    key: '_subRefresh',\n    value: function _subRefresh(channel) {\n      var _this9 = this;\n\n      this._debug('refresh subscription token for channel', channel);\n\n      if (this._subRefreshTimeouts[channel] !== undefined) {\n        this._clearSubRefreshTimeout(channel);\n      } else {\n        return;\n      }\n\n      var cb = function cb(resp) {\n        if (resp.error || resp.status !== 200) {\n          return;\n        }\n\n        var channelsData = {};\n        if (resp.data.channels) {\n          for (var i in data.channels) {\n            var channelData = resp.data.channels[i];\n            if (!channelData.channel) {\n              continue;\n            }\n            channelsData[channelData.channel] = channelData.token;\n          }\n        }\n\n        var token = channelsData[channel];\n        if (!token) {\n          return;\n        }\n        var msg = {\n          method: _this9._methodType.SUB_REFRESH,\n          params: {\n            channel: channel,\n            token: token\n          }\n        };\n\n        var sub = _this9._getSub(channel);\n        if (sub === null) {\n          return;\n        }\n\n        _this9._call(msg).then(function (result) {\n          _this9._subRefreshResponse(channel, _this9._decoder.decodeCommandResult(_this9._methodType.SUB_REFRESH, result));\n        }, function (err) {\n          _this9._subRefreshError(channel, err);\n        });\n      };\n\n      var data = {\n        client: this._clientID,\n        channels: [channel]\n      };\n\n      if (this._config.onPrivateSubscribe !== null) {\n        this._config.onPrivateSubscribe({\n          data: data\n        }, cb);\n      } else {\n        this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      }\n    }\n  }, {\n    key: '_clearSubRefreshTimeout',\n    value: function _clearSubRefreshTimeout(channel) {\n      if (this._subRefreshTimeouts[channel] !== undefined) {\n        clearTimeout(this._subRefreshTimeouts[channel]);\n        delete this._subRefreshTimeouts[channel];\n      }\n    }\n  }, {\n    key: '_subRefreshError',\n    value: function _subRefreshError(channel, err) {\n      var _this10 = this;\n\n      this._debug('subscription refresh error', channel, err);\n      this._clearSubRefreshTimeout(channel);\n      var sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n      var jitter = Math.round(Math.random() * 1000);\n      var subRefreshTimeout = setTimeout(function () {\n        return _this10._subRefresh(channel);\n      }, this._config.subRefreshInterval + jitter);\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      return;\n    }\n  }, {\n    key: '_subRefreshResponse',\n    value: function _subRefreshResponse(channel, result) {\n      var _this11 = this;\n\n      this._debug('subscription refresh success', channel);\n      this._clearSubRefreshTimeout(channel);\n      var sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n      if (result.expires === true) {\n        var subRefreshTimeout = setTimeout(function () {\n          return _this11._subRefresh(channel);\n        }, result.ttl * 1000);\n        this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      }\n      return;\n    }\n  }, {\n    key: '_subscribe',\n    value: function _subscribe(sub, isResubscribe) {\n      var _this12 = this;\n\n      this._debug('subscribing on', sub.channel);\n      var channel = sub.channel;\n\n      if (!(channel in this._subs)) {\n        this._subs[channel] = sub;\n      }\n\n      if (!this.isConnected()) {\n        // subscribe will be called later\n        sub._setNew();\n        return;\n      }\n\n      sub._setSubscribing(isResubscribe);\n\n      var msg = {\n        method: this._methodType.SUBSCRIBE,\n        params: {\n          channel: channel\n        }\n      };\n\n      // If channel name does not start with privateChannelPrefix - then we\n      // can just send subscription message to Centrifuge. If channel name\n      // starts with privateChannelPrefix - then this is a private channel\n      // and we should ask web application backend for permission first.\n      if ((0, _utils.startsWith)(channel, this._config.privateChannelPrefix)) {\n        // private channel.\n        if (this._isSubscribeBatching) {\n          this._privateChannels[channel] = true;\n        } else {\n          this.startSubscribeBatching();\n          this._subscribe(sub);\n          this.stopSubscribeBatching();\n        }\n      } else {\n        var recover = sub._needRecover();\n\n        if (recover === true) {\n          msg.params.recover = true;\n          var last = this._getLastID(channel);\n          if (last !== '') {\n            msg.params.last = last;\n          }\n          var since = sub._since;\n          if (since) {\n            msg.params.since = since;\n          }\n        }\n\n        this._call(msg).then(function (result) {\n          _this12._subscribeResponse(channel, _this12._decoder.decodeCommandResult(_this12._methodType.SUBSCRIBE, result));\n        }, function (err) {\n          _this12._subscribeError(err);\n        });\n      }\n    }\n  }, {\n    key: '_unsubscribe',\n    value: function _unsubscribe(sub) {\n      if (this.isConnected()) {\n        // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n        this._addMessage({\n          method: this._methodType.UNSUBSCRIBE,\n          params: {\n            channel: sub.channel\n          }\n        });\n      }\n    }\n  }, {\n    key: 'getSub',\n    value: function getSub(channel) {\n      return this._getSub(channel);\n    }\n  }, {\n    key: '_getSub',\n    value: function _getSub(channel) {\n      var sub = this._subs[channel];\n      if (!sub) {\n        return null;\n      }\n      return sub;\n    }\n  }, {\n    key: '_getSince',\n    value: function _getSince() {\n      return this._serverTime;\n    }\n  }, {\n    key: '_connectResponse',\n    value: function _connectResponse(result) {\n      var _this13 = this;\n\n      var wasReconnecting = this._reconnecting;\n      this._reconnecting = false;\n      this._resetRetry();\n\n      if (this.isConnected()) {\n        return;\n      }\n\n      if (this._latencyStart !== null) {\n        this._latency = new Date().getTime() - this._latencyStart.getTime();\n        this._latencyStart = null;\n      }\n\n      this._clientID = result.client;\n      this._serverTime = result.time;\n      this._setStatus('connected');\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n      }\n\n      if (result.expires) {\n        this._refreshTimeout = setTimeout(function () {\n          return _this13._refresh();\n        }, result.ttl * 1000);\n      }\n\n      this.startBatching();\n      this.startSubscribeBatching();\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n          if (sub._shouldResubscribe()) {\n            this._subscribe(sub, wasReconnecting);\n          }\n        }\n      }\n      this.stopSubscribeBatching();\n      this.stopBatching();\n\n      this._startPing();\n\n      var ctx = {\n        client: result.client,\n        transport: this._transportName,\n        latency: this._latency\n      };\n      if (result.data) {\n        ctx.data = result.data;\n      }\n\n      this.emit('connect', ctx);\n    }\n  }, {\n    key: '_stopPing',\n    value: function _stopPing() {\n      if (this._pongTimeout !== null) {\n        clearTimeout(this._pongTimeout);\n        this._pongTimeout = null;\n      }\n      if (this._pingTimeout !== null) {\n        clearTimeout(this._pingTimeout);\n        this._pingTimeout = null;\n      }\n    }\n  }, {\n    key: '_startPing',\n    value: function _startPing() {\n      var _this14 = this;\n\n      if (this._config.ping !== true || this._config.pingInterval <= 0) {\n        return;\n      }\n      if (!this.isConnected()) {\n        return;\n      }\n\n      this._pingTimeout = setTimeout(function () {\n        if (!_this14.isConnected()) {\n          _this14._stopPing();\n          return;\n        }\n        _this14.ping();\n        _this14._pongTimeout = setTimeout(function () {\n          _this14._disconnect('no ping', true);\n        }, _this14._config.pongWaitTimeout);\n      }, this._config.pingInterval);\n    }\n  }, {\n    key: '_restartPingIfNoRecoveryUsed',\n    value: function _restartPingIfNoRecoveryUsed() {\n      if (!this._hasRecoveryChannel) {\n        this._stopPing();\n        this._startPing();\n      }\n    }\n  }, {\n    key: '_subscribeError',\n    value: function _subscribeError(channel, error) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n      if (error.code === 0 && error.message === _errorTimeout) {\n        // client side timeout.\n        this._disconnect('timeout', true);\n        return;\n      }\n      sub._setSubscribeError(error);\n    }\n  }, {\n    key: '_subscribeResponse',\n    value: function _subscribeResponse(channel, result) {\n      var _this15 = this;\n\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n\n      if (result.time) {\n        this._serverTime = result.time;\n        this._hasRecoveryChannel = true;\n      }\n\n      var recovered = false;\n      if ('recovered' in result) {\n        recovered = result.recovered;\n      }\n      sub._setSubscribeSuccess(recovered);\n\n      var pubs = result.publications;\n\n      if (pubs && pubs.length > 0) {\n        // handle missed pubs.\n        pubs = pubs.reverse();\n        for (var i in pubs) {\n          if (pubs.hasOwnProperty(i)) {\n            this._handlePublication(channel, pubs[i]);\n          }\n        }\n      } else {\n        if ('last' in result) {\n          // no missed messages found so set last message id from result.\n          this._lastPubUID[channel] = result.last;\n        }\n      }\n\n      if (result.expires === true) {\n        var subRefreshTimeout = setTimeout(function () {\n          return _this15._subRefresh(channel);\n        }, result.ttl * 1000);\n        this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      }\n    }\n  }, {\n    key: '_handleReply',\n    value: function _handleReply(reply) {\n      var id = reply.id;\n      var result = reply.result;\n\n      if (!(id in this._callbacks)) {\n        return;\n      }\n      var callbacks = this._callbacks[id];\n      clearTimeout(this._callbacks[id].timeout);\n      delete this._callbacks[id];\n\n      if (!(0, _utils.errorExists)(reply)) {\n        var callback = callbacks.callback;\n        if (!callback) {\n          return;\n        }\n        callback(result);\n      } else {\n        var errback = callbacks.errback;\n        if (!errback) {\n          return;\n        }\n        errback(reply.error);\n      }\n    }\n  }, {\n    key: '_handleJoin',\n    value: function _handleJoin(channel, join) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('join', join);\n    }\n  }, {\n    key: '_handleLeave',\n    value: function _handleLeave(channel, leave) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('leave', leave);\n    }\n  }, {\n    key: '_handleUnsub',\n    value: function _handleUnsub(channel, unsub) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.unsubscribe();\n      if (unsub.resubscribe === true) {\n        sub.subscribe();\n      }\n    }\n  }, {\n    key: '_handlePublication',\n    value: function _handlePublication(channel, pub) {\n      // keep last uid received from channel.\n      this._lastPubUID[channel] = pub.uid;\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      sub.emit('publish', pub);\n    }\n  }, {\n    key: '_handleMessage',\n    value: function _handleMessage(message) {\n      this.emit('message', message.data);\n    }\n  }, {\n    key: '_handlePush',\n    value: function _handlePush(data) {\n      var push = this._decoder.decodePush(data);\n      var type = 0;\n      if ('type' in push) {\n        type = push['type'];\n      }\n      var channel = push.channel;\n\n      if (type === this._pushType.PUBLICATION) {\n        var pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n        this._handlePublication(channel, pub);\n      } else if (type === this._pushType.MESSAGE) {\n        var message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n        this._handleMessage(message);\n      } else if (type === this._pushType.JOIN) {\n        var join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n        this._handleJoin(channel, join);\n      } else if (type === this._pushType.LEAVE) {\n        var leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n        this._handleLeave(channel, leave);\n      } else if (type === this._pushType.UNSUB) {\n        var unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n        this._handleUnsub(channel, unsub);\n      }\n    }\n  }, {\n    key: '_dispatchReply',\n    value: function _dispatchReply(reply) {\n      if (reply === undefined || reply === null) {\n        this._debug('dispatch: got undefined or null reply');\n        return;\n      }\n\n      var id = reply.id;\n\n      if (id && id > 0) {\n        this._handleReply(reply);\n      } else {\n        this._handlePush(reply.result);\n      }\n    }\n  }, {\n    key: '_flush',\n    value: function _flush() {\n      var messages = this._messages.slice(0);\n      this._messages = [];\n      this._transportSend(messages);\n    }\n  }, {\n    key: '_ping',\n    value: function _ping() {\n      var _this16 = this;\n\n      var msg = {\n        method: this._methodType.PING\n      };\n      this._call(msg).then(function (result) {\n        _this16._pingResponse(_this16._decoder.decodeCommandResult(_this16._methodType.PING, result));\n      }, function (err) {\n        _this16._debug('ping error', err);\n      });\n    }\n  }, {\n    key: '_pingResponse',\n    value: function _pingResponse(result) {\n      if (!this.isConnected()) {\n        return;\n      }\n      if (result && result.time) {\n        this._serverTime = result.time;\n      }\n      this._stopPing();\n      this._startPing();\n    }\n  }, {\n    key: '_getLastID',\n    value: function _getLastID(channel) {\n      var lastUID = this._lastPubUID[channel];\n\n      if (lastUID) {\n        this._debug('last uid found and sent for channel', channel);\n        return lastUID;\n      }\n      this._debug('no last uid found for channel', channel);\n      return '';\n    }\n  }, {\n    key: '_createErrorObject',\n    value: function _createErrorObject(message, code) {\n      var errObject = {\n        message: message,\n        code: code || 0\n      };\n\n      return errObject;\n    }\n  }, {\n    key: '_registerCall',\n    value: function _registerCall(id, callback, errback) {\n      var _this17 = this;\n\n      this._callbacks[id] = {\n        callback: callback,\n        errback: errback,\n        timeout: null\n      };\n      this._callbacks[id].timeout = setTimeout(function () {\n        delete _this17._callbacks[id];\n        if ((0, _utils.isFunction)(errback)) {\n          errback(_this17._createErrorObject(_errorTimeout));\n        }\n      }, this._config.timeout);\n    }\n  }, {\n    key: '_addMessage',\n    value: function _addMessage(message, async) {\n      var id = void 0;\n      if (!async) {\n        id = this._nextMessageId();\n        message.id = id;\n      }\n      if (this._isBatching === true) {\n        this._messages.push(message);\n      } else {\n        this._transportSend([message]);\n      }\n      if (!async) {\n        return id;\n      }\n      return 0;\n    }\n  }, {\n    key: 'isConnected',\n    value: function isConnected() {\n      return this._isConnected();\n    }\n  }, {\n    key: 'connect',\n    value: function connect() {\n      this._connect();\n    }\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this._disconnect('client', false);\n    }\n  }, {\n    key: 'ping',\n    value: function ping() {\n      return this._ping();\n    }\n  }, {\n    key: 'startBatching',\n    value: function startBatching() {\n      // start collecting messages without sending them to Centrifuge until flush\n      // method called\n      this._isBatching = true;\n    }\n  }, {\n    key: 'stopBatching',\n    value: function stopBatching() {\n      this._isBatching = false;\n      this._flush();\n    }\n  }, {\n    key: 'startSubscribeBatching',\n    value: function startSubscribeBatching() {\n      // start collecting private channels to create bulk authentication\n      // request to subscribeEndpoint when stopSubscribeBatching will be called\n      this._isSubscribeBatching = true;\n    }\n  }, {\n    key: 'stopSubscribeBatching',\n    value: function stopSubscribeBatching() {\n      var _this18 = this;\n\n      // create request to subscribeEndpoint with collected private channels\n      // to ask if this client can subscribe on each channel\n      this._isSubscribeBatching = false;\n      var authChannels = this._privateChannels;\n      this._privateChannels = {};\n\n      var channels = [];\n\n      for (var channel in authChannels) {\n        if (authChannels.hasOwnProperty(channel)) {\n          var sub = this._getSub(channel);\n          if (!sub) {\n            continue;\n          }\n          channels.push(channel);\n        }\n      }\n\n      if (channels.length === 0) {\n        this._debug('no private channels found, no need to make request');\n        return;\n      }\n\n      var data = {\n        client: this._clientID,\n        channels: channels\n      };\n\n      var cb = function cb(resp) {\n        if (resp.error || resp.status !== 200) {\n          _this18._debug('authorization request failed');\n          for (var i in channels) {\n            if (channels.hasOwnProperty(i)) {\n              var _channel2 = channels[i];\n              _this18._subscribeError(_channel2, _this18._createErrorObject('authorization request failed'));\n            }\n          }\n          return;\n        }\n\n        var channelsData = {};\n        if (resp.data.channels) {\n          for (var _i in resp.data.channels) {\n            var channelData = resp.data.channels[_i];\n            if (!channelData.channel) {\n              continue;\n            }\n            channelsData[channelData.channel] = channelData.token;\n          }\n        }\n\n        // try to send all subscriptions in one request.\n        var batch = false;\n\n        if (!_this18._isBatching) {\n          _this18.startBatching();\n          batch = true;\n        }\n\n        for (var _i2 in channels) {\n          if (channels.hasOwnProperty(_i2)) {\n            var _ret = function () {\n              var channel = channels[_i2];\n              var token = channelsData[channel];\n\n              if (!token) {\n                // subscription:error\n                _this18._subscribeError(channel, _this18._createErrorObject('permission denied', 103));\n                return 'continue';\n              } else {\n                var msg = {\n                  method: _this18._methodType.SUBSCRIBE,\n                  params: {\n                    channel: channel,\n                    token: token\n                  }\n                };\n\n                var _sub = _this18._getSub(channel);\n                if (_sub === null) {\n                  return 'continue';\n                }\n\n                var recover = _sub._needRecover();\n\n                if (recover === true) {\n                  msg.params.recover = true;\n                  var last = _this18._getLastID(channel);\n                  if (last !== '') {\n                    msg.params.last = last;\n                  }\n                  if (_sub._since) {\n                    msg.params.since = _sub._since;\n                  }\n                }\n                _this18._call(msg).then(function (result) {\n                  _this18._subscribeResponse(channel, _this18._decoder.decodeCommandResult(_this18._methodType.SUBSCRIBE, result));\n                }, function (err) {\n                  _this18._subscribeError(channel, err);\n                });\n              }\n            }();\n\n            if (_ret === 'continue') continue;\n          }\n        }\n\n        if (batch) {\n          _this18.stopBatching();\n        }\n      };\n\n      if (this._config.onPrivateSubscribe !== null) {\n        this._config.onPrivateSubscribe({\n          data: data\n        }, cb);\n      } else {\n        this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe(channel, events) {\n      var currentSub = this._getSub(channel);\n      if (currentSub !== null) {\n        currentSub._setEvents(events);\n        if (currentSub._isUnsubscribed()) {\n          currentSub.subscribe();\n        }\n        return currentSub;\n      }\n      var sub = new _subscription2.default(this, channel, events);\n      this._subs[channel] = sub;\n      sub.subscribe();\n      return sub;\n    }\n  }]);\n\n  return Centrifuge;\n}(_events2.default);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n\n/***/ 11:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _STATE_NEW = 0;\nvar _STATE_SUBSCRIBING = 1;\nvar _STATE_SUCCESS = 2;\nvar _STATE_ERROR = 3;\nvar _STATE_UNSUBSCRIBED = 4;\n\nvar Subscription = function (_EventEmitter) {\n  _inherits(Subscription, _EventEmitter);\n\n  function Subscription(centrifuge, channel, events) {\n    _classCallCheck(this, Subscription);\n\n    var _this = _possibleConstructorReturn(this, (Subscription.__proto__ || Object.getPrototypeOf(Subscription)).call(this));\n\n    _this.channel = channel;\n    _this._centrifuge = centrifuge;\n    _this._status = _STATE_NEW;\n    _this._error = null;\n    _this._isResubscribe = false;\n    _this._ready = false;\n    _this._subscriptionPromise = null;\n    _this._noResubscribe = false;\n    _this._since = null;\n    _this._setEvents(events);\n    _this._initializePromise();\n    return _this;\n  }\n\n  _createClass(Subscription, [{\n    key: '_initializePromise',\n    value: function _initializePromise() {\n      var _this2 = this;\n\n      // this helps us to wait until subscription will successfully\n      // subscribe and call actions such as presence, history etc in\n      // synchronous way.\n      this._ready = false;\n\n      this._subscriptionPromise = new global.Promise(function (resolve, reject) {\n        _this2._resolve = function (value) {\n          _this2._ready = true;\n          resolve(value);\n        };\n        _this2._reject = function (err) {\n          _this2._ready = true;\n          reject(err);\n        };\n      });\n    }\n  }, {\n    key: '_needRecover',\n    value: function _needRecover() {\n      return this._since !== null;\n    }\n  }, {\n    key: '_setEvents',\n    value: function _setEvents(events) {\n      if (!events) {\n        return;\n      }\n      if ((0, _utils.isFunction)(events)) {\n        // events is just a function to handle publication received from channel.\n        this.on('publish', events);\n      } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n        var knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n        for (var i = 0, l = knownEvents.length; i < l; i++) {\n          var ev = knownEvents[i];\n          if (ev in events) {\n            this.on(ev, events[ev]);\n          }\n        }\n      }\n    }\n  }, {\n    key: '_isNew',\n    value: function _isNew() {\n      return this._status === _STATE_NEW;\n    }\n  }, {\n    key: '_isUnsubscribed',\n    value: function _isUnsubscribed() {\n      return this._status === _STATE_UNSUBSCRIBED;\n    }\n  }, {\n    key: '_isSubscribing',\n    value: function _isSubscribing() {\n      return this._status === _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_isReady',\n    value: function _isReady() {\n      return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_isSuccess',\n    value: function _isSuccess() {\n      return this._status === _STATE_SUCCESS;\n    }\n  }, {\n    key: '_isError',\n    value: function _isError() {\n      return this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_setNew',\n    value: function _setNew() {\n      this._status = _STATE_NEW;\n    }\n  }, {\n    key: '_setSubscribing',\n    value: function _setSubscribing(isResubscribe) {\n      this._isResubscribe = isResubscribe || false;\n      if (this._ready === true) {\n        // new promise for this subscription\n        this._initializePromise();\n      }\n      this._status = _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_setSubscribeSuccess',\n    value: function _setSubscribeSuccess(recovered) {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._status = _STATE_SUCCESS;\n      var successContext = this._getSubscribeSuccessContext(recovered);\n\n      this._since = null;\n      this.emit('subscribe', successContext);\n      this._resolve(successContext);\n    }\n  }, {\n    key: '_setSubscribeError',\n    value: function _setSubscribeError(err) {\n      if (this._status === _STATE_ERROR) {\n        return;\n      }\n      this._status = _STATE_ERROR;\n      this._error = err;\n      var errContext = this._getSubscribeErrorContext();\n\n      this.emit('error', errContext);\n      this._reject(errContext);\n    }\n  }, {\n    key: '_triggerUnsubscribe',\n    value: function _triggerUnsubscribe() {\n      this.emit('unsubscribe', {\n        channel: this.channel\n      });\n    }\n  }, {\n    key: '_setUnsubscribed',\n    value: function _setUnsubscribed(noResubscribe) {\n      this._centrifuge._clearSubRefreshTimeout(this.channel);\n      if (this._status === _STATE_UNSUBSCRIBED) {\n        return;\n      }\n      var needTrigger = this._status === _STATE_SUCCESS;\n      this._status = _STATE_UNSUBSCRIBED;\n      if (noResubscribe === true) {\n        this._since = null;\n        this._noResubscribe = true;\n        delete this._centrifuge._lastPubUID[this.channel];\n      }\n      if (needTrigger) {\n        this._triggerUnsubscribe();\n      }\n    }\n  }, {\n    key: '_shouldResubscribe',\n    value: function _shouldResubscribe() {\n      return !this._noResubscribe;\n    }\n  }, {\n    key: '_getSubscribeSuccessContext',\n    value: function _getSubscribeSuccessContext(recovered) {\n      return {\n        channel: this.channel,\n        isResubscribe: this._isResubscribe,\n        recovered: recovered\n      };\n    }\n  }, {\n    key: '_getSubscribeErrorContext',\n    value: function _getSubscribeErrorContext() {\n      var subscribeErrorContext = this._error;\n      subscribeErrorContext.channel = this.channel;\n      subscribeErrorContext.isResubscribe = this._isResubscribe;\n      return subscribeErrorContext;\n    }\n  }, {\n    key: 'ready',\n    value: function ready(callback, errback) {\n      if (this._ready) {\n        if (this._isSuccess()) {\n          callback(this._getSubscribeSuccessContext());\n        } else {\n          errback(this._getSubscribeErrorContext());\n        }\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe() {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._noResubscribe = false;\n      this._centrifuge._subscribe(this);\n    }\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      this._setUnsubscribed(true);\n      this._centrifuge._unsubscribe(this);\n    }\n  }, {\n    key: '_methodCall',\n    value: function _methodCall(message, type) {\n      var _this3 = this;\n\n      return this._subscriptionPromise.then(function () {\n        return _this3._centrifuge._call(message);\n      }).then(function (result) {\n        return _this3._centrifuge._decoder.decodeCommandResult(type, result);\n      });\n    }\n  }, {\n    key: 'publish',\n    value: function publish(data) {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PUBLISH,\n        params: {\n          channel: this.channel,\n          data: data\n        }\n      }, this._centrifuge._methodType.PUBLISH);\n    }\n  }, {\n    key: 'presence',\n    value: function presence() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE);\n    }\n  }, {\n    key: 'presenceStats',\n    value: function presenceStats() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE_STATS,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE_STATS);\n    }\n  }, {\n    key: 'history',\n    value: function history() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.HISTORY,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.HISTORY);\n    }\n  }]);\n\n  return Subscription;\n}(_events2.default);\n\nexports.default = Subscription;\nmodule.exports = exports['default'];\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n\n/***/ 12:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JsonMethodType = exports.JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nvar JsonPushType = exports.JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4\n};\n\nvar JsonEncoder = exports.JsonEncoder = function () {\n  function JsonEncoder() {\n    _classCallCheck(this, JsonEncoder);\n  }\n\n  _createClass(JsonEncoder, [{\n    key: 'encodeCommands',\n    value: function encodeCommands(commands) {\n      var encodedCommands = [];\n      for (var i in commands) {\n        if (commands.hasOwnProperty(i)) {\n          encodedCommands.push(JSON.stringify(commands[i]));\n        }\n      }\n      return encodedCommands.join('\\n');\n    }\n  }]);\n\n  return JsonEncoder;\n}();\n\nvar JsonDecoder = exports.JsonDecoder = function () {\n  function JsonDecoder() {\n    _classCallCheck(this, JsonDecoder);\n  }\n\n  _createClass(JsonDecoder, [{\n    key: 'decodeReplies',\n    value: function decodeReplies(data) {\n      var replies = [];\n      var encodedReplies = data.split('\\n');\n      for (var i in encodedReplies) {\n        if (encodedReplies.hasOwnProperty(i)) {\n          if (!encodedReplies[i]) {\n            continue;\n          }\n          var reply = JSON.parse(encodedReplies[i]);\n          replies.push(reply);\n        }\n      }\n      return replies;\n    }\n  }, {\n    key: 'decodeCommandResult',\n    value: function decodeCommandResult(methodType, data) {\n      return data;\n    }\n  }, {\n    key: 'decodePush',\n    value: function decodePush(data) {\n      return data;\n    }\n  }, {\n    key: 'decodePushData',\n    value: function decodePushData(pushType, data) {\n      return data;\n    }\n  }]);\n\n  return JsonDecoder;\n}();\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _centrifuge = __webpack_require__(10);\n\nexports.default = _centrifuge.Centrifuge;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 6:\n/***/ (function(module, exports) {\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n/***/ }),\n\n/***/ 7:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startsWith = startsWith;\nexports.isFunction = isFunction;\nexports.log = log;\nexports.backoff = backoff;\nexports.errorExists = errorExists;\nfunction startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nfunction isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nfunction log(level, args) {\n  if (global.console) {\n    var logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nfunction backoff(step, min, max) {\n  var jitter = 0.5 * Math.random();\n  var interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nfunction errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ })\n\n/******/ });\n});\n\n\n// WEBPACK FOOTER //\n// centrifuge.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 31);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6ba5988ead18c7ced9e0","import EventEmitter from 'events';\nimport Subscription from './subscription';\n\nimport {\n  JsonEncoder,\n  JsonDecoder,\n  JsonMethodType,\n  JsonPushType\n} from './json';\n\nimport {\n  isFunction,\n  log,\n  startsWith,\n  errorExists,\n  backoff\n} from './utils';\n\nconst _errorTimeout = 'timeout';\n\nexport class Centrifuge extends EventEmitter {\n\n  constructor(url, options) {\n    super();\n    this._url = url;\n    this._sockjs = null;\n    this._isSockjs = false;\n    this._binary = false;\n    this._methodType = null;\n    this._pushType = null;\n    this._encoder = null;\n    this._decoder = null;\n    this._status = 'disconnected';\n    this._reconnect = true;\n    this._reconnecting = false;\n    this._transport = null;\n    this._transportName = null;\n    this._transportClosed = true;\n    this._messageId = 0;\n    this._clientID = null;\n    this._refreshRequired = false;\n    this._subs = {};\n    this._lastPubUID = {};\n    this._messages = [];\n    this._isBatching = false;\n    this._isSubscribeBatching = false;\n    this._privateChannels = {};\n    this._numRefreshFailed = 0;\n    this._refreshTimeout = null;\n    this._pingTimeout = null;\n    this._pongTimeout = null;\n    this._subRefreshTimeouts = {};\n    this._retries = 0;\n    this._callbacks = {};\n    this._latency = null;\n    this._latencyStart = null;\n    this._connectData = null;\n    this._token = null;\n    this._serverTime = null;\n    this._hasRecoveryChannel = false;\n    this._config = {\n      debug: false,\n      sockjs: null,\n      promise: null,\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: [\n        'websocket',\n        'xdr-streaming',\n        'xhr-streaming',\n        'eventsource',\n        'iframe-eventsource',\n        'iframe-htmlfile',\n        'xdr-polling',\n        'xhr-polling',\n        'iframe-xhr-polling',\n        'jsonp-polling'\n      ],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    this._configure(options);\n  }\n\n  setToken(token) {\n    this._token = token;\n  }\n\n  setConnectData(data) {\n    this._connectData = data;\n  }\n\n  _ajax(url, params, headers, data, callback) {\n    let query = '';\n    this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n    const xhr = (global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP'));\n\n    for (const i in params) {\n      if (params.hasOwnProperty(i)) {\n        if (query.length > 0) {\n          query += '&';\n        }\n        query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n      }\n    }\n    if (query.length > 0) {\n      query = '?' + query;\n    }\n    xhr.open('POST', url + query, true);\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    for (const headerName in headers) {\n      if (headers.hasOwnProperty(headerName)) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n      }\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          let data, parsed = false;\n          try {\n            data = JSON.parse(xhr.responseText);\n            parsed = true;\n          } catch (e) {\n            callback({\n              error: 'Invalid JSON. Data was: ' + xhr.responseText,\n              status: 200,\n              data: null\n            });\n          }\n          if (parsed) { // prevents double execution.\n            callback({\n              data: data,\n              status: 200\n            });\n          }\n        } else {\n          this._log('wrong status code in AJAX response', xhr.status);\n          callback({\n            status: xhr.status,\n            data: null\n          });\n        }\n      }\n    };\n    setTimeout(() => xhr.send(JSON.stringify(data)), 20);\n    return xhr;\n  };\n\n  _log() {\n    log('info', arguments);\n  };\n\n  _debug() {\n    if (this._config.debug === true) {\n      log('debug', arguments);\n    }\n  };\n\n  _websocketSupported() {\n    return !(typeof WebSocket !== 'function' && typeof WebSocket !== 'object');\n  };\n\n  _setFormat(format) {\n    if (this._formatOverride(format)) {\n      return;\n    }\n    if (format === 'protobuf') {\n      throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n    }\n    this._binary = false;\n    this._methodType = JsonMethodType;\n    this._pushType = JsonPushType;\n    this._encoder = new JsonEncoder();\n    this._decoder = new JsonDecoder();\n  }\n\n  _formatOverride(format) {\n    return false;\n  }\n\n  _configure(configuration) {\n    if (!('Promise' in global)) {\n      throw new Error('Promise polyfill required');\n    }\n\n    Object.assign(this._config, configuration || {});\n    this._debug('centrifuge config', this._config);\n\n    if (!this._url) {\n      throw new Error('url required');\n    }\n\n    if (startsWith(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n      this._setFormat('protobuf');\n    } else {\n      this._setFormat('json');\n    }\n\n    if (startsWith(this._url, 'http')) {\n      this._debug('client will try to connect to SockJS endpoint');\n      if (this._config.sockjs !== null) {\n        this._debug('SockJS explicitly provided in options');\n        this._sockjs = this._config.sockjs;\n      } else {\n        if (typeof global.SockJS === 'undefined') {\n          throw new Error('SockJS not found, use ws:// in url or include SockJS');\n        }\n        this._debug('use globally defined SockJS');\n        this._sockjs = global.SockJS;\n      }\n    } else {\n      this._debug('client will connect to websocket endpoint');\n    }\n  };\n\n  _setStatus(newStatus) {\n    if (this._status !== newStatus) {\n      this._debug('Status', this._status, '->', newStatus);\n      this._status = newStatus;\n    }\n  };\n\n  _isDisconnected() {\n    return this._status === 'disconnected';\n  };\n\n  _isConnecting() {\n    return this._status === 'connecting';\n  };\n\n  _isConnected() {\n    return this._status === 'connected';\n  };\n\n  _nextMessageId() {\n    return ++this._messageId;\n  };\n\n  _resetRetry() {\n    this._debug('reset retries count to 0');\n    this._retries = 0;\n  };\n\n  _getRetryInterval() {\n    const interval = backoff(this._retries, this._config.minRetry, this._config.maxRetry);\n\n    this._retries += 1;\n    return interval;\n  };\n\n  _clearConnectedState(reconnect) {\n    this._clientID = null;\n    this._hasRecoveryChannel = false;\n    this._stopPing();\n\n    // fire errbacks of registered outgoing calls.\n    for (const id in this._callbacks) {\n      if (this._callbacks.hasOwnProperty(id)) {\n        const callbacks = this._callbacks[id];\n        clearTimeout(callbacks.timeout);\n        const errback = callbacks.errback;\n        if (!errback) {\n          continue;\n        }\n        errback(this._createErrorObject('disconnected'));\n      }\n    }\n    this._callbacks = {};\n\n    // fire unsubscribe events\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n\n        if (reconnect) {\n          if (sub._isSuccess()) {\n            sub._triggerUnsubscribe();\n            sub._since = this._getSince();\n          }\n          sub._setSubscribing();\n        } else {\n          sub._setUnsubscribed();\n        }\n      }\n    }\n\n    // clear refresh timer\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    // clear sub refresh timers\n    for (const channel in this._subRefreshTimeouts) {\n      if (this._subRefreshTimeouts.hasOwnProperty(channel) && this._subRefreshTimeouts[channel]) {\n        this._clearSubRefreshTimeout(channel);\n      }\n    }\n    this._subRefreshTimeouts = {};\n\n    if (!this._reconnect) {\n      // completely clear subscriptions\n      this._subs = {};\n    }\n  };\n\n  _transportSend(commands) {\n    if (!commands.length) {\n      return;\n    }\n    if (!this._transport) {\n      throw new Error('transport not connected');\n    }\n    this._transport.send(this._encoder.encodeCommands(commands));\n  }\n\n  _setupTransport() {\n    this._isSockjs = false;\n\n    // detect transport to use - SockJS or Websocket\n    if (this._sockjs !== null) {\n      const sockjsOptions = {\n        transports: this._config.sockjsTransports\n      };\n\n      if (this._config.sockjsServer !== null) {\n        sockjsOptions.server = this._config.sockjsServer;\n      }\n      this._isSockjs = true;\n      this._transport = new this._sockjs(this._url, null, sockjsOptions);\n    } else {\n      if (!this._websocketSupported()) {\n        this._debug('No Websocket support and no SockJS configured, can not connect');\n        return;\n      }\n      this._transport = new WebSocket(this._url);\n      if (this._binary === true) {\n        this._transport.binaryType = 'arraybuffer';\n      }\n    }\n\n    this._transport.onopen = () => {\n      this._transportClosed = false;\n\n      if (this._isSockjs) {\n        this._transportName = 'sockjs-' + this._transport.transport;\n        this._transport.onheartbeat = () => this._restartPingIfNoRecoveryUsed();\n      } else {\n        this._transportName = 'websocket';\n      }\n\n      // Can omit method here due to zero value.\n      const msg = {\n        // method: this._methodType.CONNECT\n      };\n\n      if (this._token || this._connectData) {\n        msg.params = {};\n      }\n\n      if (this._token) {\n        msg.params.token = this._token;\n      }\n\n      if (this._connectData) {\n        msg.params.data = this._connectData;\n      }\n\n      this._latencyStart = new Date();\n      this._call(msg).then(result => {\n        this._connectResponse(this._decoder.decodeCommandResult(this._methodType.CONNECT, result));\n      }, err => {\n        if (err.code === 109) { // token expired.\n          this._refreshRequired = true;\n        }\n        this._disconnect('connect error', true);\n      });\n    };\n\n    this._transport.onerror = error => {\n      this._debug('transport level error', error);\n    };\n\n    this._transport.onclose = closeEvent => {\n      this._transportClosed = true;\n      let reason = 'connection closed';\n      let needReconnect = true;\n\n      if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n        try {\n          const advice = JSON.parse(closeEvent.reason);\n          this._debug('reason is an advice object', advice);\n          reason = advice.reason;\n          needReconnect = advice.reconnect;\n          this._lastMessageTime = new Date();\n        } catch (e) {\n          reason = closeEvent.reason;\n          this._debug('reason is a plain string', reason);\n        }\n      }\n\n      // onTransportClose callback should be executed every time transport was closed.\n      // This can be helpful to catch failed connection events (because our disconnect\n      // event only called once and every future attempts to connect do not fire disconnect\n      // event again).\n      if (this._config.onTransportClose !== null) {\n        this._config.onTransportClose({\n          event: closeEvent,\n          reason: reason,\n          reconnect: needReconnect\n        });\n      }\n\n      this._disconnect(reason, needReconnect);\n\n      if (this._reconnect === true) {\n        this._reconnecting = true;\n        const interval = this._getRetryInterval();\n\n        this._debug('reconnect after ' + interval + ' milliseconds');\n        setTimeout(() => {\n          if (this._reconnect === true) {\n            if (this._refreshRequired) {\n              this._refresh();\n            } else {\n              this._connect();\n            }\n          }\n        }, interval);\n      }\n    };\n\n    this._transport.onmessage = event => {\n      this._lastMessageTime = new Date();\n      const replies = this._decoder.decodeReplies(event.data);\n      for (const i in replies) {\n        if (replies.hasOwnProperty(i)) {\n          this._dispatchReply(replies[i]);\n        }\n      }\n      this._restartPingIfNoRecoveryUsed();\n    };\n  };\n\n  rpc(data) {\n    const msg = {\n      method: this._methodType.RPC,\n      params: {\n        data: data\n      }\n    };\n    return this._call(msg).then(result => this._decoder.decodeCommandResult(this._methodType.RPC, result));\n  }\n\n  send(data) {\n    const msg = {\n      method: this._methodType.SEND,\n      params: {\n        data: data\n      }\n    };\n\n    return this._callAsync(msg);\n  }\n\n  _callAsync(msg) {\n    this._addMessage(msg, true);\n  }\n\n  _call(msg) {\n    return new global.Promise((resolve, reject) => {\n      const id = this._addMessage(msg);\n      this._registerCall(id, resolve, reject);\n    });\n  }\n\n  _connect() {\n    if (this.isConnected()) {\n      this._debug('connect called when already connected');\n      return;\n    }\n    if (this._status === 'connecting') {\n      return;\n    }\n\n    this._debug('start connecting');\n    this._setStatus('connecting');\n    this._clientID = null;\n    this._reconnect = true;\n    this._setupTransport();\n  };\n\n  _disconnect(reason, shouldReconnect) {\n\n    if (this._isDisconnected()) {\n      return;\n    }\n\n    this._debug('disconnected:', reason, shouldReconnect);\n\n    const reconnect = shouldReconnect || false;\n\n    if (reconnect === false) {\n      this._reconnect = false;\n    }\n\n    this._clearConnectedState(reconnect);\n\n    if (!this._isDisconnected()) {\n      this._setStatus('disconnected');\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      if (this._reconnecting === false) {\n        this.emit('disconnect', {\n          reason: reason,\n          reconnect: reconnect\n        });\n      }\n    }\n\n    if (!this._transportClosed) {\n      this._transport.close();\n    }\n  };\n\n  _refreshFailed() {\n    this._numRefreshFailed = 0;\n    if (!this._isDisconnected()) {\n      this._disconnect('refresh failed', false);\n    }\n    if (this._config.onRefreshFailed !== null) {\n      this._config.onRefreshFailed();\n    }\n  };\n\n  _refresh() {\n    // ask application for new connection token.\n    this._debug('refresh token');\n\n    if (this._config.refreshAttempts === 0) {\n      this._debug('refresh attempts set to 0, do not send refresh request at all');\n      this._refreshFailed();\n      return;\n    }\n\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    const cb = (resp) => {\n      if (resp.error || resp.status !== 200) {\n        // We don't perform any connection status related actions here as we are\n        // relying on server that must close connection eventually.\n        if (resp.error) {\n          this._debug('error refreshing connection token', resp.error);\n        } else {\n          this._debug('error refreshing connection token: wrong status code', resp.status);\n        }\n        this._numRefreshFailed++;\n        if (this._refreshTimeout !== null) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._config.refreshAttempts !== null && this._numRefreshFailed >= this._config.refreshAttempts) {\n          this._refreshFailed();\n          return;\n        }\n        const jitter = Math.round(Math.random() * 1000 * Math.max(this._numRefreshFailed, 20));\n        const interval = this._config.refreshInterval + jitter;\n        this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n        return;\n      }\n      this._numRefreshFailed = 0;\n      this._token = resp.data.token;\n      if (!this._token) {\n        this._refreshFailed();\n        return;\n      }\n      if (this._isDisconnected() && this._reconnect) {\n        this._debug('token refreshed, connect from scratch');\n        this._connect();\n      } else {\n        this._debug('send refreshed token');\n        const msg = {\n          method: this._methodType.REFRESH,\n          params: {\n            token: this._token\n          }\n        };\n        this._call(msg).then(result => {\n          this._refreshResponse(this._decoder.decodeCommandResult(this._methodType.REFRESH, result));\n        }, err => {\n          this._refreshError(err);\n        });\n      }\n    };\n\n    if (this._config.onRefresh !== null) {\n      const context = {};\n      this._config.onRefresh(context, cb);\n    } else {\n      this._ajax(\n        this._config.refreshEndpoint,\n        this._config.refreshParams,\n        this._config.refreshHeaders,\n        this._config.refreshData,\n        cb\n      );\n    }\n  };\n\n  _refreshError(err) {\n    this._debug('refresh error', err);\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    const interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n    this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n  }\n\n  _refreshResponse(result) {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (result.expires) {\n      this._clientID = result.client;\n      this._refreshTimeout = setTimeout(() => this._refresh(), result.ttl * 1000);\n    }\n  };\n\n  _subRefresh(channel) {\n    this._debug('refresh subscription token for channel', channel);\n\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      this._clearSubRefreshTimeout(channel);\n    } else {\n      return;\n    }\n\n    const cb = (resp) => {\n      if (resp.error || resp.status !== 200) {\n        return;\n      }\n\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      const token = channelsData[channel];\n      if (!token) {\n        return;\n      }\n      const msg = {\n        method: this._methodType.SUB_REFRESH,\n        params: {\n          channel: channel,\n          token: token\n        }\n      };\n\n      const sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n\n      this._call(msg).then(result => {\n        this._subRefreshResponse(channel, this._decoder.decodeCommandResult(this._methodType.SUB_REFRESH, result));\n      }, err => {\n        this._subRefreshError(channel, err);\n      });\n    };\n\n    const data = {\n      client: this._clientID,\n      channels: [channel]\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n    }\n  };\n\n  _clearSubRefreshTimeout(channel) {\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      clearTimeout(this._subRefreshTimeouts[channel]);\n      delete this._subRefreshTimeouts[channel];\n    }\n  }\n\n  _subRefreshError(channel, err) {\n    this._debug('subscription refresh error', channel, err);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    const jitter = Math.round(Math.random() * 1000);\n    let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._config.subRefreshInterval + jitter);\n    this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    return;\n  }\n\n  _subRefreshResponse(channel, result) {\n    this._debug('subscription refresh success', channel);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), result.ttl * 1000);\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n    return;\n  };\n\n  _subscribe(sub, isResubscribe) {\n    this._debug('subscribing on', sub.channel);\n    const channel = sub.channel;\n\n    if (!(channel in this._subs)) {\n      this._subs[channel] = sub;\n    }\n\n    if (!this.isConnected()) {\n      // subscribe will be called later\n      sub._setNew();\n      return;\n    }\n\n    sub._setSubscribing(isResubscribe);\n\n    const msg = {\n      method: this._methodType.SUBSCRIBE,\n      params: {\n        channel: channel\n      }\n    };\n\n    // If channel name does not start with privateChannelPrefix - then we\n    // can just send subscription message to Centrifuge. If channel name\n    // starts with privateChannelPrefix - then this is a private channel\n    // and we should ask web application backend for permission first.\n    if (startsWith(channel, this._config.privateChannelPrefix)) {\n      // private channel.\n      if (this._isSubscribeBatching) {\n        this._privateChannels[channel] = true;\n      } else {\n        this.startSubscribeBatching();\n        this._subscribe(sub);\n        this.stopSubscribeBatching();\n      }\n    } else {\n      const recover = sub._needRecover();\n\n      if (recover === true) {\n        msg.params.recover = true;\n        const last = this._getLastID(channel);\n        if (last !== '') {\n          msg.params.last = last;\n        }\n        const since = sub._since;\n        if (since) {\n          msg.params.since = since;\n        }\n      }\n\n      this._call(msg).then(result => {\n        this._subscribeResponse(channel, this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, result));\n      }, err => {\n        this._subscribeError(err);\n      });\n    }\n  };\n\n  _unsubscribe(sub) {\n    if (this.isConnected()) {\n      // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n      this._addMessage({\n        method: this._methodType.UNSUBSCRIBE,\n        params: {\n          channel: sub.channel\n        }\n      });\n    }\n  };\n\n  getSub(channel) {\n    return this._getSub(channel);\n  }\n\n  _getSub(channel) {\n    const sub = this._subs[channel];\n    if (!sub) {\n      return null;\n    }\n    return sub;\n  };\n\n  _getSince() {\n    return this._serverTime;\n  }\n\n  _connectResponse(result) {\n    const wasReconnecting = this._reconnecting;\n    this._reconnecting = false;\n    this._resetRetry();\n\n    if (this.isConnected()) {\n      return;\n    }\n\n    if (this._latencyStart !== null) {\n      this._latency = (new Date()).getTime() - this._latencyStart.getTime();\n      this._latencyStart = null;\n    }\n\n    this._clientID = result.client;\n    this._serverTime = result.time;\n    this._setStatus('connected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n\n    if (result.expires) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), result.ttl * 1000);\n    }\n\n    this.startBatching();\n    this.startSubscribeBatching();\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n        if (sub._shouldResubscribe()) {\n          this._subscribe(sub, wasReconnecting);\n        }\n      }\n    }\n    this.stopSubscribeBatching();\n    this.stopBatching();\n\n    this._startPing();\n\n    const ctx = {\n      client: result.client,\n      transport: this._transportName,\n      latency: this._latency\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n\n    this.emit('connect', ctx);\n  };\n\n  _stopPing() {\n    if (this._pongTimeout !== null) {\n      clearTimeout(this._pongTimeout);\n      this._pongTimeout = null;\n    }\n    if (this._pingTimeout !== null) {\n      clearTimeout(this._pingTimeout);\n      this._pingTimeout = null;\n    }\n  };\n\n  _startPing() {\n    if (this._config.ping !== true || this._config.pingInterval <= 0) {\n      return;\n    }\n    if (!this.isConnected()) {\n      return;\n    }\n\n    this._pingTimeout = setTimeout(() => {\n      if (!this.isConnected()) {\n        this._stopPing();\n        return;\n      }\n      this.ping();\n      this._pongTimeout = setTimeout(() => {\n        this._disconnect('no ping', true);\n      }, this._config.pongWaitTimeout);\n    }, this._config.pingInterval);\n  };\n\n  _restartPingIfNoRecoveryUsed() {\n    if (!this._hasRecoveryChannel) {\n      this._stopPing();\n      this._startPing();\n    }\n  };\n\n  _subscribeError(channel, error) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    if (error.code === 0 && error.message === _errorTimeout) { // client side timeout.\n      this._disconnect('timeout', true);\n      return;\n    }\n    sub._setSubscribeError(error);\n  };\n\n  _subscribeResponse(channel, result) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n\n    if (result.time) {\n      this._serverTime = result.time;\n      this._hasRecoveryChannel = true;\n    }\n\n    let recovered = false;\n    if ('recovered' in result) {\n      recovered = result.recovered;\n    }\n    sub._setSubscribeSuccess(recovered);\n\n    let pubs = result.publications;\n\n    if (pubs && pubs.length > 0) {\n      // handle missed pubs.\n      pubs = pubs.reverse();\n      for (let i in pubs) {\n        if (pubs.hasOwnProperty(i)) {\n          this._handlePublication(channel, pubs[i]);\n        }\n      }\n    } else {\n      if ('last' in result) {\n        // no missed messages found so set last message id from result.\n        this._lastPubUID[channel] = result.last;\n      }\n    }\n\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), result.ttl * 1000);\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n  };\n\n  _handleReply(reply) {\n    const id = reply.id;\n    const result = reply.result;\n\n    if (!(id in this._callbacks)) {\n      return;\n    }\n    const callbacks = this._callbacks[id];\n    clearTimeout(this._callbacks[id].timeout);\n    delete this._callbacks[id];\n\n    if (!errorExists(reply)) {\n      const callback = callbacks.callback;\n      if (!callback) {\n        return;\n      }\n      callback(result);\n    } else {\n      const errback = callbacks.errback;\n      if (!errback) {\n        return;\n      }\n      errback(reply.error);\n    }\n  }\n\n  _handleJoin(channel, join) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('join', join);\n  };\n\n  _handleLeave(channel, leave) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('leave', leave);\n  };\n\n  _handleUnsub(channel, unsub) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.unsubscribe();\n    if (unsub.resubscribe === true) {\n      sub.subscribe();\n    }\n  };\n\n  _handlePublication(channel, pub) {\n    // keep last uid received from channel.\n    this._lastPubUID[channel] = pub.uid;\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    sub.emit('publish', pub);\n  };\n\n  _handleMessage(message) {\n    this.emit('message', message.data);\n  };\n\n  _handlePush(data) {\n    const push = this._decoder.decodePush(data);\n    let type = 0;\n    if ('type' in push) {\n      type = push['type'];\n    }\n    const channel = push.channel;\n\n    if (type === this._pushType.PUBLICATION) {\n      const pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n      this._handlePublication(channel, pub);\n    } else if (type === this._pushType.MESSAGE) {\n      const message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n      this._handleMessage(message);\n    } else if (type === this._pushType.JOIN) {\n      const join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n      this._handleJoin(channel, join);\n    } else if (type === this._pushType.LEAVE) {\n      const leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n      this._handleLeave(channel, leave);\n    } else if (type === this._pushType.UNSUB) {\n      const unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n      this._handleUnsub(channel, unsub);\n    }\n  }\n\n  _dispatchReply(reply) {\n    if (reply === undefined || reply === null) {\n      this._debug('dispatch: got undefined or null reply');\n      return;\n    }\n\n    const id = reply.id;\n\n    if (id && id > 0) {\n      this._handleReply(reply);\n    } else {\n      this._handlePush(reply.result);\n    }\n  };\n\n  _flush() {\n    const messages = this._messages.slice(0);\n    this._messages = [];\n    this._transportSend(messages);\n  };\n\n  _ping() {\n    const msg = {\n      method: this._methodType.PING\n    };\n    this._call(msg).then(result => {\n      this._pingResponse(this._decoder.decodeCommandResult(this._methodType.PING, result));\n    }, err => {\n      this._debug('ping error', err);\n    });\n  };\n\n  _pingResponse(result) {\n    if (!this.isConnected()) {\n      return;\n    }\n    if (result && result.time) {\n      this._serverTime = result.time;\n    }\n    this._stopPing();\n    this._startPing();\n  }\n\n  _getLastID(channel) {\n    const lastUID = this._lastPubUID[channel];\n\n    if (lastUID) {\n      this._debug('last uid found and sent for channel', channel);\n      return lastUID;\n    }\n    this._debug('no last uid found for channel', channel);\n    return '';\n  };\n\n  _createErrorObject(message, code) {\n    const errObject = {\n      message: message,\n      code: code || 0\n    };\n\n    return errObject;\n  };\n\n  _registerCall(id, callback, errback) {\n    this._callbacks[id] = {\n      callback: callback,\n      errback: errback,\n      timeout: null\n    };\n    this._callbacks[id].timeout = setTimeout(() => {\n      delete this._callbacks[id];\n      if (isFunction(errback)) {\n        errback(this._createErrorObject(_errorTimeout));\n      }\n    }, this._config.timeout);\n  };\n\n  _addMessage(message, async) {\n    let id;\n    if (!async) {\n      id = this._nextMessageId();\n      message.id = id;\n    }\n    if (this._isBatching === true) {\n      this._messages.push(message);\n    } else {\n      this._transportSend([message]);\n    }\n    if (!async) {\n      return id;\n    }\n    return 0;\n  };\n\n  isConnected() {\n    return this._isConnected();\n  }\n\n  connect() {\n    this._connect();\n  };\n\n  disconnect() {\n    this._disconnect('client', false);\n  };\n\n  ping() {\n    return this._ping();\n  }\n\n  startBatching() {\n    // start collecting messages without sending them to Centrifuge until flush\n    // method called\n    this._isBatching = true;\n  };\n\n  stopBatching() {\n    this._isBatching = false;\n    this._flush();\n  };\n\n  startSubscribeBatching() {\n    // start collecting private channels to create bulk authentication\n    // request to subscribeEndpoint when stopSubscribeBatching will be called\n    this._isSubscribeBatching = true;\n  };\n\n  stopSubscribeBatching() {\n    // create request to subscribeEndpoint with collected private channels\n    // to ask if this client can subscribe on each channel\n    this._isSubscribeBatching = false;\n    const authChannels = this._privateChannels;\n    this._privateChannels = {};\n\n    const channels = [];\n\n    for (const channel in authChannels) {\n      if (authChannels.hasOwnProperty(channel)) {\n        const sub = this._getSub(channel);\n        if (!sub) {\n          continue;\n        }\n        channels.push(channel);\n      }\n    }\n\n    if (channels.length === 0) {\n      this._debug('no private channels found, no need to make request');\n      return;\n    }\n\n    const data = {\n      client: this._clientID,\n      channels: channels\n    };\n\n    const cb = (resp) => {\n      if (resp.error || resp.status !== 200) {\n        this._debug('authorization request failed');\n        for (const i in channels) {\n          if (channels.hasOwnProperty(i)) {\n            const channel = channels[i];\n            this._subscribeError(channel, this._createErrorObject('authorization request failed'));\n          }\n        }\n        return;\n      }\n\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      // try to send all subscriptions in one request.\n      let batch = false;\n\n      if (!this._isBatching) {\n        this.startBatching();\n        batch = true;\n      }\n\n      for (const i in channels) {\n        if (channels.hasOwnProperty(i)) {\n          const channel = channels[i];\n          const token = channelsData[channel];\n\n          if (!token) {\n            // subscription:error\n            this._subscribeError(channel, this._createErrorObject('permission denied', 103));\n            continue;\n          } else {\n            const msg = {\n              method: this._methodType.SUBSCRIBE,\n              params: {\n                channel: channel,\n                token: token\n              }\n            };\n\n            const sub = this._getSub(channel);\n            if (sub === null) {\n              continue;\n            }\n\n            const recover = sub._needRecover();\n\n            if (recover === true) {\n              msg.params.recover = true;\n              const last = this._getLastID(channel);\n              if (last !== '') {\n                msg.params.last = last;\n              }\n              if (sub._since) {\n                msg.params.since = sub._since;\n              }\n            }\n            this._call(msg).then(result => {\n              this._subscribeResponse(channel, this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, result));\n            }, err => {\n              this._subscribeError(channel, err);\n            });\n          }\n        }\n      }\n\n      if (batch) {\n        this.stopBatching();\n      }\n\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n    }\n  };\n\n  subscribe(channel, events) {\n    const currentSub = this._getSub(channel);\n    if (currentSub !== null) {\n      currentSub._setEvents(events);\n      if (currentSub._isUnsubscribed()) {\n        currentSub.subscribe();\n      }\n      return currentSub;\n    }\n    const sub = new Subscription(this, channel, events);\n    this._subs[channel] = sub;\n    sub.subscribe();\n    return sub;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/centrifuge.js","import EventEmitter from 'events';\n\nimport {\n  isFunction\n} from './utils';\n\nconst _STATE_NEW = 0;\nconst _STATE_SUBSCRIBING = 1;\nconst _STATE_SUCCESS = 2;\nconst _STATE_ERROR = 3;\nconst _STATE_UNSUBSCRIBED = 4;\n\nexport default class Subscription extends EventEmitter {\n  constructor(centrifuge, channel, events) {\n    super();\n    this.channel = channel;\n    this._centrifuge = centrifuge;\n    this._status = _STATE_NEW;\n    this._error = null;\n    this._isResubscribe = false;\n    this._ready = false;\n    this._subscriptionPromise = null;\n    this._noResubscribe = false;\n    this._since = null;\n    this._setEvents(events);\n    this._initializePromise();\n  }\n\n  _initializePromise() {\n    // this helps us to wait until subscription will successfully\n    // subscribe and call actions such as presence, history etc in\n    // synchronous way.\n    this._ready = false;\n\n    this._subscriptionPromise = new global.Promise((resolve, reject) => {\n      this._resolve = value => {\n        this._ready = true;\n        resolve(value);\n      };\n      this._reject = err => {\n        this._ready = true;\n        reject(err);\n      };\n    });\n  };\n\n  _needRecover() {\n    return this._since !== null;\n  };\n\n  _setEvents(events) {\n    if (!events) {\n      return;\n    }\n    if (isFunction(events)) {\n      // events is just a function to handle publication received from channel.\n      this.on('publish', events);\n    } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n      const knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n      for (let i = 0, l = knownEvents.length; i < l; i++) {\n        const ev = knownEvents[i];\n        if (ev in events) {\n          this.on(ev, events[ev]);\n        }\n      }\n    }\n  };\n\n  _isNew() {\n    return this._status === _STATE_NEW;\n  };\n\n  _isUnsubscribed() {\n    return this._status === _STATE_UNSUBSCRIBED;\n  };\n\n  _isSubscribing() {\n    return this._status === _STATE_SUBSCRIBING;\n  };\n\n  _isReady() {\n    return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n  };\n\n  _isSuccess() {\n    return this._status === _STATE_SUCCESS;\n  };\n\n  _isError() {\n    return this._status === _STATE_ERROR;\n  };\n\n  _setNew() {\n    this._status = _STATE_NEW;\n  };\n\n  _setSubscribing(isResubscribe) {\n    this._isResubscribe = isResubscribe || false;\n    if (this._ready === true) {\n      // new promise for this subscription\n      this._initializePromise();\n    }\n    this._status = _STATE_SUBSCRIBING;\n  };\n\n  _setSubscribeSuccess(recovered) {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._status = _STATE_SUCCESS;\n    const successContext = this._getSubscribeSuccessContext(recovered);\n\n    this._since = null;\n    this.emit('subscribe', successContext);\n    this._resolve(successContext);\n  };\n\n  _setSubscribeError(err) {\n    if (this._status === _STATE_ERROR) {\n      return;\n    }\n    this._status = _STATE_ERROR;\n    this._error = err;\n    const errContext = this._getSubscribeErrorContext();\n\n    this.emit('error', errContext);\n    this._reject(errContext);\n  };\n\n  _triggerUnsubscribe() {\n    this.emit('unsubscribe', {\n      channel: this.channel\n    });\n  };\n\n  _setUnsubscribed(noResubscribe) {\n    this._centrifuge._clearSubRefreshTimeout(this.channel);\n    if (this._status === _STATE_UNSUBSCRIBED) {\n      return;\n    }\n    const needTrigger = this._status === _STATE_SUCCESS;\n    this._status = _STATE_UNSUBSCRIBED;\n    if (noResubscribe === true) {\n      this._since = null;\n      this._noResubscribe = true;\n      delete this._centrifuge._lastPubUID[this.channel];\n    }\n    if (needTrigger) {\n      this._triggerUnsubscribe();\n    }\n  };\n\n  _shouldResubscribe() {\n    return !this._noResubscribe;\n  };\n\n  _getSubscribeSuccessContext(recovered) {\n    return {\n      channel: this.channel,\n      isResubscribe: this._isResubscribe,\n      recovered: recovered\n    };\n  };\n\n  _getSubscribeErrorContext() {\n    const subscribeErrorContext = this._error;\n    subscribeErrorContext.channel = this.channel;\n    subscribeErrorContext.isResubscribe = this._isResubscribe;\n    return subscribeErrorContext;\n  };\n\n  ready(callback, errback) {\n    if (this._ready) {\n      if (this._isSuccess()) {\n        callback(this._getSubscribeSuccessContext());\n      } else {\n        errback(this._getSubscribeErrorContext());\n      }\n    }\n  };\n\n  subscribe() {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._noResubscribe = false;\n    this._centrifuge._subscribe(this);\n  };\n\n  unsubscribe() {\n    this._setUnsubscribed(true);\n    this._centrifuge._unsubscribe(this);\n  };\n\n  _methodCall(message, type) {\n    return this._subscriptionPromise\n      .then(() => this._centrifuge._call(message))\n      .then(result => this._centrifuge._decoder.decodeCommandResult(type, result))\n    ;\n  }\n\n  publish(data) {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PUBLISH,\n      params: {\n        channel: this.channel,\n        data: data\n      }\n    }, this._centrifuge._methodType.PUBLISH);\n  };\n\n  presence() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE);\n  };\n\n  presenceStats() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE_STATS,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE_STATS);\n  };\n\n  history() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.HISTORY,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.HISTORY);\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/subscription.js","export const JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nexport const JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4\n};\n\nexport class JsonEncoder {\n  encodeCommands(commands) {\n    const encodedCommands = [];\n    for (const i in commands) {\n      if (commands.hasOwnProperty(i)) {\n        encodedCommands.push(JSON.stringify(commands[i]));\n      }\n    }\n    return encodedCommands.join('\\n');\n  }\n}\n\nexport class JsonDecoder {\n  decodeReplies(data) {\n    const replies = [];\n    const encodedReplies = data.split('\\n');\n    for (const i in encodedReplies) {\n      if (encodedReplies.hasOwnProperty(i)) {\n        if (!encodedReplies[i]) {\n          continue;\n        }\n        const reply = JSON.parse(encodedReplies[i]);\n        replies.push(reply);\n      }\n    }\n    return replies;\n  }\n\n  decodeCommandResult(methodType, data) {\n    return data;\n  }\n\n  decodePush(data) {\n    return data;\n  }\n\n  decodePushData(pushType, data) {\n    return data;\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/json.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 3\n// module chunks = 0 1","import {Centrifuge} from './centrifuge.js';\nexport default Centrifuge;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/events/events.js\n// module id = 6\n// module chunks = 0 1","export function startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nexport function isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nexport function log(level, args) {\n  if (global.console) {\n    const logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nexport function backoff(step, min, max) {\n  const jitter = 0.5 * Math.random();\n  const interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nexport function errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js"],"sourceRoot":""}